# -*- mode: org -*-
#+STARTUP: overview
* list all nodes and relations

Not sure what a 'node' means other than that its not a
'relation'...I think.

Either way, i have products, stores...things and 'relations
entities' to connect them.

#+begin_example
MATCH (n) RETURN n;
#+end_example

Results:
#+begin_example
{'n': {'urls': ['https://www.hwcmagazine.com'], 'name': 'HWC Magazine'}}
{'n': {'urls': [''], 'name': 'J. Kenji LÃ³pez-Alt'}}
{'n': {'urls': ['https://drivemehungry.com/zaru-soba-cold-soba-noodles/'], 'name': 'Jamie'}}
{'n': {'urls': ['https://www.youtube.com/@JoshuaWeissman'], 'name': 'Joshua Weissman'}}
{'n': {'urls': ['https://www.loveandlemons.com/'], 'name': 'Love and Lemons'}}
{'n': {'ytb': 'https://www.youtube.com/@Marionskitchen', 'name': 'Marionskitchen'}}
{'n': {'urls': ['https://www.meghanlivingstone.com/'], 'name': 'Meghan Livingstone'}}
{'n': {'urls': ['https://www.ambitiouskitchen.com/'], 'name': 'Monique Volz'}}
{'n': {'urls': ['https://natashaskitchen.com/'], 'name': 'Natasha Kravchuk'}}
{'n': {'urls': ['https://www.youtube.com/@PailinsKitchen', 'https://hot-thai-kitchen.com/', 'https://www.google.com/search?sca_esv=579544099&sxsrf=AM9HkKlG2TJDAMfP4SZwsCFg3egPZCc3lw:1699153855825&q=pailin+chongchitnant&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjs2Pqv8auCAxXQJzQIHSXWC2MQ0pQJegQIExAB&biw=1440&bih=758&dpr=2'], 'name': 'Pailin Chongchitnant'}}
# ...truncated to 10 for brevity
#+end_example

* list all products


#+begin_example
MATCH (p:Product)
RETURN p;
#+end_example

Results:
#+begin_example
{'p': {'name': 'A.1. Sauce', 'type': 'A.1. Sauce'}}
{'p': {'name': 'Allspice', 'type': 'Allspice'}}
{'p': {'name': 'Almond Milk', 'type': 'Almond Milk'}}
{'p': {'name': 'Almonds - bulk roasted or raw -- whichever is cheaper', 'type': 'Almonds'}}
{'p': {'name': 'Angkor Cambodian Food Paste Lemongrass', 'type': 'Food Paste'}}
# ...truncated to 5 for brevity
#+end_example

* find cumin in my list of products


#+begin_example
MATCH (p:Product)
WHERE p.name = 'Ground Cumin'
RETURN p;
#+end_example

Results:
#+begin_example
{'p': {'name': 'Ground Cumin', 'type': 'Cumin'}}
#+end_example

* list product entities with properties


#+begin_example
MATCH (n:Product) RETURN n;
#+end_example

Results:
#+begin_example
{'n': {'name': 'A.1. Sauce', 'type': 'A.1. Sauce'}}
{'n': {'name': 'Allspice', 'type': 'Allspice'}}
{'n': {'name': 'Almond Milk', 'type': 'Almond Milk'}}
{'n': {'name': 'Almonds - bulk roasted or raw -- whichever is cheaper', 'type': 'Almonds'}}
{'n': {'name': 'Angkor Cambodian Food Paste Lemongrass', 'type': 'Food Paste'}}
{'n': {'name': 'Apple Cider Vinegar', 'type': 'Apple Cider Vinegar'}}
{'n': {'name': 'Apples', 'type': 'Fruit'}}
{'n': {'urls': ['https://www.google.com/search?sca_esv=581110607&sxsrf=AM9HkKlvxPZkhbmImtTjzpzoOo0bggx5gA:1699596383961&q=aroy-d+coconut+milk&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjq0uj14biCAxW7GTQIHT6CDx0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2', 'https://www.templeofthai.com/food/coconut-milk/aroy-d-large', 'https://www.zhicayfoods.com/products/aroy-d-coconut-milk-original'], 'name': 'Aroy-D Coconut Milk', 'type': 'Coconut Milk'}}
{'n': {'urls': ['https://www.google.com/search?sca_esv=579549787&sxsrf=AM9HkKlJ1akktSB6XfxzBxrRxM_VM-9vxA:1699158988679&q=aroy-d+red+curry+paste', 'https://www.youtube.com/watch?v=GC7ccNKatVU'], 'name': 'Aroy-D Red Curry Paste', 'type': 'Curry Paste', 'brand': 'Aroy D'}}
{'n': {'name': 'Artichoke Hearts', 'type': 'Artichokes'}}
# ...truncated to 10 for brevity
#+end_example

* list all product names


#+begin_example
MATCH (p:Product)
RETURN p.name
ORDER BY toLower(p.name);
#+end_example

Results:
#+begin_example
{'p.name': 'A.1. Sauce'}
{'p.name': 'ACT Restoring Mouthwash'}
{'p.name': 'Adams Peanut Butter'}
{'p.name': 'Allspice'}
{'p.name': 'Almond Milk'}
# ...truncated to 5 for brevity
#+end_example

* list all product urls


#+begin_example
MATCH (p:Product)
RETURN p.name AS ProductName, p.urls AS URLs;
#+end_example

Results:
#+begin_example
{'ProductName': 'A.1. Sauce', 'URLs': None}
{'ProductName': 'Allspice', 'URLs': None}
{'ProductName': 'Almond Milk', 'URLs': None}
{'ProductName': 'Almonds - bulk roasted or raw -- whichever is cheaper', 'URLs': None}
{'ProductName': 'Angkor Cambodian Food Paste Lemongrass', 'URLs': None}
{'ProductName': 'Apple Cider Vinegar', 'URLs': None}
{'ProductName': 'Apples', 'URLs': None}
{'ProductName': 'Aroy-D Coconut Milk', 'URLs': ['https://www.google.com/search?sca_esv=581110607&sxsrf=AM9HkKlvxPZkhbmImtTjzpzoOo0bggx5gA:1699596383961&q=aroy-d+coconut+milk&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjq0uj14biCAxW7GTQIHT6CDx0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2', 'https://www.templeofthai.com/food/coconut-milk/aroy-d-large', 'https://www.zhicayfoods.com/products/aroy-d-coconut-milk-original']}
{'ProductName': 'Aroy-D Red Curry Paste', 'URLs': ['https://www.google.com/search?sca_esv=579549787&sxsrf=AM9HkKlJ1akktSB6XfxzBxrRxM_VM-9vxA:1699158988679&q=aroy-d+red+curry+paste', 'https://www.youtube.com/watch?v=GC7ccNKatVU']}
{'ProductName': 'Artichoke Hearts', 'URLs': None}
# ...truncated to 10 for brevity
#+end_example

* list unique node types


#+begin_example
MATCH (n)
RETURN DISTINCT labels(n) AS objectType
ORDER BY objectType;
#+end_example

Results:
#+begin_example
{'objectType': []}
{'objectType': ['Person']}
{'objectType': ['Product']}
{'objectType': ['Recipe']}
{'objectType': ['Store']}
#+end_example

* list products with identical names

This reveals that I need to clean up duplicates. Listing two
instances of the same product name is harmful.

#+begin_example
MATCH (p:Product)
WITH p.name AS productName, COLLECT(p) AS products
WHERE SIZE(products) > 1
RETURN productName, products;
#+end_example

Results:
#+begin_example
{'productName': 'Fish Sauce', 'products': [{'name': 'Fish Sauce', 'type': 'Fish Sauce', 'brand': 'Red Boat Premium'}, {'urls': ['https://www.google.com/search?client=emacs&sca_esv=579549787&sxsrf=AM9HkKm8epAD3ytpi0GWZEym4PGKNYwfHA:1699157904119&q=Squid+Fish+Sauce&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiY96q6gKyCAxXiJzQIHVrbD78Q0pQJegQIChAB&biw=1440&bih=758&dpr=2'], 'name': 'Fish Sauce', 'type': 'Fish Sauce', 'brand': 'Squid'}]}
#+end_example
[[https://www.google.com/search?q=neo4j+cypher+COLLECT+subquery][cypher COLLECT]]

* count duplicates for each product


#+begin_example
MATCH (p:Product)
WITH p.name AS productName, COLLECT(p) AS products
WHERE SIZE(products) > 1
RETURN productName, COUNT(products) AS duplicateCount;
#+end_example

Results:
#+begin_example
{'productName': 'Fish Sauce', 'duplicateCount': 1}
#+end_example

* count entities with the same product name

In other words how much work do I have to do to cleanup my data?

#+begin_example
MATCH (p:Product)
WITH p.name AS productName, COUNT(p) AS productCount
WHERE productCount > 1
RETURN COUNT(productCount) AS totalDuplicateProducts;
#+end_example

Results:
#+begin_example
{'totalDuplicateProducts': 1}
#+end_example

* list all products with their urls

Each product can have 0 or more urls.

#+begin_example
    for each product
       for each url
          ...
#+end_example
[[https://www.google.com/search?q=neo4j+cypher+UNWIND][cypher UNWIND]]

#+begin_example
MATCH (p:Product)
WITH p.name AS productName, p.urls AS productUrls
UNWIND productUrls AS url
RETURN productName, url;
#+end_example

Results:
#+begin_example
{'productName': 'Aroy-D Coconut Milk', 'url': 'https://www.google.com/search?sca_esv=581110607&sxsrf=AM9HkKlvxPZkhbmImtTjzpzoOo0bggx5gA:1699596383961&q=aroy-d+coconut+milk&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjq0uj14biCAxW7GTQIHT6CDx0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2'}
{'productName': 'Aroy-D Coconut Milk', 'url': 'https://www.templeofthai.com/food/coconut-milk/aroy-d-large'}
{'productName': 'Aroy-D Coconut Milk', 'url': 'https://www.zhicayfoods.com/products/aroy-d-coconut-milk-original'}
{'productName': 'Aroy-D Red Curry Paste', 'url': 'https://www.google.com/search?sca_esv=579549787&sxsrf=AM9HkKlJ1akktSB6XfxzBxrRxM_VM-9vxA:1699158988679&q=aroy-d+red+curry+paste'}
{'productName': 'Aroy-D Red Curry Paste', 'url': 'https://www.youtube.com/watch?v=GC7ccNKatVU'}
# ...truncated to 5 for brevity
#+end_example

* BAD: list relation entities with properties

BAD: list relations, not just CONTAINS and show relation
properties.

Gotcha!  This is wrong.  Notice we're missing the is-the-same-as relation.

#+begin_example
MATCH ()-[r]-()
UNWIND keys(r) AS propertyNames
RETURN DISTINCT type(r) AS type, propertyNames AS propertyName
ORDER BY type, propertyName;
#+end_example

Results:
#+begin_example
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'substitutes'}
{'type': 'CONTAINS', 'propertyName': 'urls'}
{'type': 'PURCHASE_AT', 'propertyName': 'aisle'}
{'type': 'PURCHASE_AT', 'propertyName': 'url'}
{'type': 'PURCHASE_AT', 'propertyName': 'urls'}
{'type': 'RECOMMENDS', 'propertyName': 'urls'}
#+end_example

* list all relations


#+begin_example
MATCH ()-[r]-()
RETURN DISTINCT type(r) AS relationType
ORDER BY relationType;
#+end_example

Results:
#+begin_example
{'relationType': 'CONTAINS'}
{'relationType': 'CREATED'}
{'relationType': 'IS_THE_SAME_AS'}
{'relationType': 'PURCHASE_AT'}
{'relationType': 'RECOMMENDS'}
#+end_example

* find Vegan Thai Red Curry


#+begin_example
MATCH (r:Recipe {name: 'Vegan Thai Red Curry'})-[:CONTAINS]->(p:Product)
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Cumin seeds', 'Coriander seeds', 'White Peppercorns']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Shallots', 'Cilantro roots', 'Lemongrass']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Garlic']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Galangal']}
#+end_example

* find Thai Red Curry without specifying exact title

Substring matching with CONTAINS. We didn't specify Vegan Thai Red
Curry here.

#+begin_example
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE r.name CONTAINS 'Thai Red Curry'
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Full fat coconut milk', 'Light Brown Sugar', 'Ginger', 'Chicken Stock or Water', 'Lemongrass', 'Zucchini']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Onion', 'Red Bell Pepper', 'Garlic']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Thai basil']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Boneless Chicken Thighs']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Hau Hau Market', 'Ingredients': ['Fish sauce']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Whole Foods', 'Ingredients': ['Lemon Juice']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Cumin seeds', 'Coriander seeds', 'White Peppercorns']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Shallots', 'Cilantro roots', 'Lemongrass']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Garlic']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Galangal']}
#+end_example

* find Thai Curry with regex


#+begin_example
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE r.name =~ '.*Thai.*Curry.*'
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Full fat coconut milk', 'Light Brown Sugar', 'Ginger', 'Chicken Stock or Water', 'Lemongrass', 'Zucchini']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Onion', 'Red Bell Pepper', 'Garlic']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Thai basil']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Boneless Chicken Thighs']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Hau Hau Market', 'Ingredients': ['Fish sauce']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Whole Foods', 'Ingredients': ['Lemon Juice']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Cumin seeds', 'Coriander seeds', 'White Peppercorns']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Shallots', 'Cilantro roots', 'Lemongrass']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Garlic']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Galangal']}
#+end_example

* find recipes with either Thai or Curry


#+begin_example
// ok:
// MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
// WHERE r.name =~ '(?i).*Thai.*|(?i).*Curry.*'
// MATCH (p)-[:PURCHASE_AT]->(s:Store)
// RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;

// better:
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE r.name =~ '(?i).*(Thai|Curry).*'
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Full fat coconut milk', 'Light Brown Sugar', 'Ginger', 'Chicken Stock or Water', 'Lemongrass', 'Zucchini']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Onion', 'Red Bell Pepper', 'Garlic']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Thai basil']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Boneless Chicken Thighs']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Hau Hau Market', 'Ingredients': ['Fish sauce']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Whole Foods', 'Ingredients': ['Lemon Juice']}
{'Recipe': 'Pad Thai', 'Store': 'Hau Hau Market', 'Ingredients': ['Shrimp', 'Fish sauce', 'Garlic Chives', 'Mung Bean Sprouts', 'Rice Sticks', 'Thai-style Baked Tofu', 'Rice Stick Noodles', 'Pressed Tofu', 'Roasted Chili Flakes']}
{'Recipe': 'Pad Thai', 'Store': 'PCC', 'Ingredients': ['Dry-Roasted Peanuts', 'Tamarind Paste', 'Sweet Paprika', 'Grounded Roasted Peanuts']}
{'Recipe': 'Pad Thai', 'Store': "Trader Joe's", 'Ingredients': ['Garlic', 'Lime', 'Chicken', 'Eggs', 'Pressed Tofu']}
{'Recipe': 'Pad Thai', 'Store': 'Safeway', 'Ingredients': ['Granulated Sugar', 'Dried Shrimp', 'Mung Bean Sprouts', 'Vegetable Oil', 'Shallots']}
{'Recipe': 'Pad Thai', 'Store': 'Viet-Wah Asian Food Market', 'Ingredients': ['Banana Leaf']}
{'Recipe': 'Pad Thai', 'Store': 'Whole Foods', 'Ingredients': ['Lime juice']}
{'Recipe': 'Pad Thai', 'Store': "Lam's Seafood Asian Market", 'Ingredients': ['Dried Shrimp']}
{'Recipe': 'Pad Thai', 'Store': 'M2M Mart', 'Ingredients': ['Chili Sauce', 'Mung Bean Sprouts']}
{'Recipe': 'Pad Thai', 'Store': 'Spice SPC', 'Ingredients': ['Chili Sauce', 'Tamarind Liquid']}
{'Recipe': 'Pad Thai', 'Store': 'Uwajimaya', 'Ingredients': ['Rice Wine Vinegar', 'Palm Sugar', 'Tamarind Liquid', 'Sweetened Radish']}
{'Recipe': 'Pad Thai', 'Store': 'Thanh Son Tofu', 'Ingredients': ['Thai-style Baked Tofu']}
{'Recipe': 'Phad Thai', 'Store': 'PCC', 'Ingredients': ['Roasted Unsalted Peanuts']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Cumin seeds', 'Coriander seeds', 'White Peppercorns']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Shallots', 'Cilantro roots', 'Lemongrass']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Garlic']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Galangal']}
{'Recipe': 'The Best Green Curry', 'Store': "Trader Joe's", 'Ingredients': ['Garlic cloves', 'Lime']}
{'Recipe': 'The Best Green Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Thai basil', 'Kaffir lime leaves', 'Galangal', 'Thai Eggplant', 'Palm Sugar', 'Snow peas']}
{'Recipe': 'The Best Green Curry', 'Store': 'Madison Co-op', 'Ingredients': ['White Peppercorns', 'Chicken Thighs', 'Cumin seeds', 'Coriander seeds']}
{'Recipe': 'The Best Green Curry', 'Store': 'Hau Hau Market', 'Ingredients': ['Kaffir lime leaves', 'Fish sauce']}
{'Recipe': 'The Best Green Curry', 'Store': 'Safeway', 'Ingredients': ['Serranos', 'Lemongrass', 'Shallots', 'Cilantro', 'Full fat coconut milk', 'Chicken stock']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': 'Madison Co-op', 'Ingredients': ['Coriander powder', 'Chili powder']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': "Trader Joe's", 'Ingredients': ['Red Bell Pepper', 'Onion', 'Garlic cloves']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': 'Whole Foods', 'Ingredients': ['Lime juice']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': 'QFC', 'Ingredients': ['Salt']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': 'Safeway', 'Ingredients': ['Ginger', 'Lemongrass', 'Full fat coconut milk', 'Coconut Oil', 'Chicken stock']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': 'Uwajimaya', 'Ingredients': ['Thai basil', 'Thai Eggplant', 'Thai chilies']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': 'PCC', 'Ingredients': ['Coconut Oil']}
{'Recipe': 'Thai Eggplant Recipe', 'Store': "Lam's Seafood Asian Market", 'Ingredients': ['Thai chilies']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'Madison Co-op', 'Ingredients': ['Yellow Curry Powder']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'Safeway', 'Ingredients': ['Carrots', 'Russet Potatoes', 'Brown Sugar', 'Full fat coconut milk', 'Coconut Oil', 'Chicken Broth', 'Cilantro']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'Whole Foods', 'Ingredients': ['Maesri Thai Red Curry Paste']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': "Trader Joe's", 'Ingredients': ['Garlic', 'Yellow Onion']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'QFC', 'Ingredients': ['Chicken Breast']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'Uwajimaya', 'Ingredients': ['Rice']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'PCC', 'Ingredients': ['Coconut Oil']}
{'Recipe': 'Yellow Coconut Curry Chicken', 'Store': 'Hau Hau Market', 'Ingredients': ['Fish sauce']}
{'Recipe': 'Yellow Curry with Chicken', 'Store': 'Madison Co-op', 'Ingredients': ['Curry Powder', 'Cumin seeds', 'Coriander seeds']}
{'Recipe': 'Yellow Curry with Chicken', 'Store': "Trader Joe's", 'Ingredients': ['Chicken', 'Garlic']}
{'Recipe': 'Yellow Curry with Chicken', 'Store': 'Safeway', 'Ingredients': ['Shallots', 'Potatoes', 'Full fat coconut milk', 'Ginger', 'Lemongrass', 'Yellow Curry Paste']}
{'Recipe': 'Yellow Curry with Chicken', 'Store': 'Hau Hau Market', 'Ingredients': ['Fish sauce']}
{'Recipe': 'Yellow Curry with Chicken', 'Store': 'M2M Mart', 'Ingredients': ['Yellow Curry Paste']}
{'Recipe': 'Yellow Curry with Chicken', 'Store': 'Uwajimaya', 'Ingredients': ['Galangal']}
#+end_example

* find Thai Curry using cypher IN [] query format

This returns empty...thats unexpected...

#+begin_example
MATCH (r:Recipe)
WHERE 'Thai' IN [r.name] AND 'Curry' IN [r.name]
RETURN r.name AS Recipe;
#+end_example

Results:
#+begin_example
#+end_example

* find Thai Curry with multiple substings

Why does this return no results?

#+begin_example
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE 'Thai' IN r.name AND 'Curry' IN r.name
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
#+end_example

* find Thai Curry with regex case insensitively


#+begin_example
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE r.name =~ '(?i).*thai.*curry.*'
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Full fat coconut milk', 'Light Brown Sugar', 'Ginger', 'Chicken Stock or Water', 'Lemongrass', 'Zucchini']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Onion', 'Red Bell Pepper', 'Garlic']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Thai basil']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Boneless Chicken Thighs']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Hau Hau Market', 'Ingredients': ['Fish sauce']}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Whole Foods', 'Ingredients': ['Lemon Juice']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Madison Co-op', 'Ingredients': ['Cumin seeds', 'Coriander seeds', 'White Peppercorns']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Safeway', 'Ingredients': ['Shallots', 'Cilantro roots', 'Lemongrass']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': "Trader Joe's", 'Ingredients': ['Garlic']}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Uwajimaya', 'Ingredients': ['Galangal']}
#+end_example

* find Thai Curry with regex case insensitively, output full product details


#+begin_example
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE r.name =~ '(?i).*thai.*curry.*'
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p) AS Products;
#+end_example

Results:
#+begin_example
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Safeway', 'Products': [{'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Light Brown Sugar', 'type': 'Brown Sugar'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Chicken Stock or Water', 'type': 'Chicken Stock'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'name': 'Zucchini', 'type': 'Zucchini'}]}
{'Recipe': 'Chicken Thai Red Curry', 'Store': "Trader Joe's", 'Products': [{'name': 'Onion', 'type': 'Onion'}, {'name': 'Red Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Garlic', 'type': 'Garlic'}]}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Uwajimaya', 'Products': [{'urls': ['https://www.fredmeyer.com/p/simple-truth-organic-thai-basil/0001111001922'], 'name': 'Thai basil', 'type': 'Herb'}]}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Madison Co-op', 'Products': [{'name': 'Boneless Chicken Thighs', 'type': 'Chicken'}]}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Hau Hau Market', 'Products': [{'name': 'Fish sauce', 'type': 'Fish Sauce'}]}
{'Recipe': 'Chicken Thai Red Curry', 'Store': 'Whole Foods', 'Products': [{'name': 'Lemon Juice', 'type': 'Lemon Juice'}]}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Madison Co-op', 'Products': [{'name': 'Cumin seeds', 'type': 'Cumin '}, {'name': 'Coriander seeds', 'type': 'Spice'}, {'name': 'White Peppercorns', 'type': 'White Peppercorns'}]}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Safeway', 'Products': [{'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Cilantro roots', 'type': 'Cilantro'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}]}
{'Recipe': 'Vegan Thai Red Curry', 'Store': "Trader Joe's", 'Products': [{'name': 'Garlic', 'type': 'Garlic'}]}
{'Recipe': 'Vegan Thai Red Curry', 'Store': 'Uwajimaya', 'Products': [{'name': 'Galangal', 'type': 'Galangal'}]}
#+end_example

* list products by type


#+begin_example
MATCH (p:Product)-[:PURCHASE_AT]->(s:Store)
RETURN p.name AS ProductName, s.name AS Store, p.type as Type
ORDER BY toLower(p.type);
#+end_example

Results:
#+begin_example
{'ProductName': 'A.1. Sauce', 'Store': 'dummy place holder', 'Type': 'A.1. Sauce'}
{'ProductName': 'Allspice', 'Store': 'Madison Co-op', 'Type': 'Allspice'}
{'ProductName': 'Almond Milk', 'Store': "Trader Joe's", 'Type': 'Almond Milk'}
{'ProductName': 'Almonds - bulk roasted or raw -- whichever is cheaper', 'Store': "Trader Joe's", 'Type': 'Almonds'}
{'ProductName': 'Apple Cider Vinegar', 'Store': 'PCC', 'Type': 'Apple Cider Vinegar'}
{'ProductName': 'Apple Cider Vinegar', 'Store': 'Safeway', 'Type': 'Apple Cider Vinegar'}
{'ProductName': 'Artichoke Hearts', 'Store': 'Safeway', 'Type': 'Artichokes'}
{'ProductName': 'Asparagus', 'Store': 'dummy place holder', 'Type': 'Asparagus'}
{'ProductName': 'Asparagus', 'Store': "Trader Joe's", 'Type': 'Asparagus'}
{'ProductName': 'Avocado Oil', 'Store': 'PCC', 'Type': 'Avocado Oil'}
# ...truncated to 10 for brevity
#+end_example

* list products that I've not yet assiged a type to


#+begin_example
MATCH (p:Product)
WHERE p.type IS NULL
RETURN p.name;
#+end_example

Results:
#+begin_example
{'p.name': 'Black beans'}
{'p.name': 'Salt and pepper'}
#+end_example

* list details about product urls

What the hell is this one...I've forgotten.

#+begin_example
MATCH (r:Recipe)-[c:CONTAINS]->(p:Product)
WHERE id(p) IS NULL
RETURN r.name AS Recipe, c.quantity AS Quantity, c.urls AS RecipeUrls;
#+end_example

Results:
#+begin_example
#+end_example

* BAD: tally products with associated brands

I can't get this to do what I expect.

#+begin_example
// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE p.brand = ''
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
// ORDER BY toLower(Brand);

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE p.brand IS NOT NULL AND p.brand <> ''
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
// ORDER BY toLower(Brand);

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE exists(p.brand) AND trim(p.brand) <> ''
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
// ORDER BY toLower(Brand);

// Neo.ClientError.Statement.SyntaxError
// The property existence syntax `... exists(variable.property)` is no longer supported. Please use `variable.property IS NOT NULL` instead. (line 3, column 11 (offset: 77))
// "    WHERE exists(p.brand) AND trim(p.brand) <> ''"

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE p.brand IS NOT NULL AND trim(p.brand) <> ''
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
// ORDER BY toLower(Brand);

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE p.brand IS NOT NULL AND TRIM(p.brand) <> ''
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
// ORDER BY toLower(Brand);

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE p.brand IS NOT NULL AND TRIM(p.brand) <> ''
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
// ORDER BY toLower(p.brand);
//
// In a WITH/RETURN with DISTINCT or an aggregation, it is not possible to access variables declared before the WITH/RETURN: p (line 5, column 22 (offset: 270))
// "    ORDER BY toLower(p.brand);"

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE p.brand IS NOT NULL AND TRIM(p.brand) <> ''
// WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
// ORDER BY toLower(p.brand);

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE COALESCE(p.brand, '') <> ''
// WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
// ORDER BY toLower(p.brand);

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE COALESCE(TRIM(p.brand), '') <> ''
// WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
// ORDER BY toLower(TRIM(p.brand));

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE COALESCE(p.brand, '') <> '' AND TRIM(p.brand) <> ''
// WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
// ORDER BY toLower(TRIM(p.brand));

// MATCH (p:Product)
// OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
// WHERE NOT (p.brand IS NULL OR TRIM(p.brand) = '')
// WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
// RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
// ORDER BY toLower(TRIM(p.brand));

// cypher how to filter items whose properties are zero length string

// MATCH (n:Node)
// WHERE ALL(prop IN keys(n) WHERE length(n[prop]) = 0)
// RETURN n;

// MATCH (n:Product)
// WHERE ALL(prop IN keys(n) WHERE length(n[prop]) = 0)
// RETURN n;

MATCH (p:Product)
WHERE p.Brand IS NULL OR p.Brand = ""
RETURN COUNT(p) AS productCount;
#+end_example

Results:
#+begin_example
{'productCount': 541}
#+end_example

* find products without associated brands


#+begin_example
MATCH (p:Product)
WITH count(p) AS TotalProducts,
     sum(CASE WHEN p.brand IS NOT NULL AND p.brand <> '' THEN 1 ELSE 0 END) AS ProductsWithBrand,
     sum(CASE WHEN p.brand IS NULL OR p.brand = '' THEN 1 ELSE 0 END) AS ProductsWithoutBrand
RETURN TotalProducts, ProductsWithBrand, ProductsWithoutBrand;
#+end_example

Results:
#+begin_example
{'TotalProducts': 541, 'ProductsWithBrand': 8, 'ProductsWithoutBrand': 533}
#+end_example

* include product brands


#+begin_example
MATCH (p:Product)
OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
ORDER BY toLower(Brand);
#+end_example

Results:
#+begin_example
{'ProductName': 'A.1. Sauce', 'Type': 'A.1. Sauce', 'Brand': '', 'AvailableAtStores': ['dummy place holder']}
{'ProductName': 'Allspice', 'Type': 'Allspice', 'Brand': '', 'AvailableAtStores': ['Madison Co-op']}
{'ProductName': 'Almond Milk', 'Type': 'Almond Milk', 'Brand': '', 'AvailableAtStores': ["Trader Joe's"]}
{'ProductName': 'Almonds - bulk roasted or raw -- whichever is cheaper', 'Type': 'Almonds', 'Brand': '', 'AvailableAtStores': ["Trader Joe's"]}
{'ProductName': 'Angkor Cambodian Food Paste Lemongrass', 'Type': 'Food Paste', 'Brand': '', 'AvailableAtStores': ['QFC']}
{'ProductName': 'Apple Cider Vinegar', 'Type': 'Apple Cider Vinegar', 'Brand': '', 'AvailableAtStores': ['PCC', 'Safeway']}
{'ProductName': 'Apples', 'Type': 'Fruit', 'Brand': '', 'AvailableAtStores': ['Safeway']}
{'ProductName': 'Aroy-D Coconut Milk', 'Type': 'Coconut Milk', 'Brand': '', 'AvailableAtStores': []}
{'ProductName': 'Artichoke Hearts', 'Type': 'Artichokes', 'Brand': '', 'AvailableAtStores': ['Safeway']}
{'ProductName': 'Asparagus', 'Type': 'Asparagus', 'Brand': '', 'AvailableAtStores': ["Trader Joe's", 'dummy place holder']}
# ...truncated to 10 for brevity
#+end_example

* find products with non-alphanumeric names

List products whose names contain non-alphanum sorted randomly to
prevent boredom while cleaning data.

#+begin_example
MATCH (p:Product)
WHERE p.name =~ ".*[^a-zA-Z0-9 ].*"
RETURN p.name AS ProductName
ORDER BY RAND();
#+end_example

Results:
#+begin_example
{'ProductName': 'Marketspice Tea Decaf - 2 Oz for Mommy'}
{'ProductName': 'Whole wheat Flour, all-purpose'}
{'ProductName': 'Coffee - T - PLU 8853'}
{'ProductName': 'Black, Beluga Lentils'}
{'ProductName': 'Pancake Mix - Snoqualmie Falls Lodge'}
{'ProductName': 'Raisins - Bulk baby, bulk'}
{'ProductName': 'Aroy-D Red Curry Paste'}
{'ProductName': 'Coffee / MTM / PLU 8368 / Decaf / Decaf / Decaf Kind Unknown'}
{'ProductName': 'One Percent or 2 Percent Milk in Glass Jar (Not Red Cap Whole Milk)'}
{'ProductName': 'Coconut Milk - 13.5 oz can'}
# ...truncated to 10 for brevity
#+end_example

* BAD: get non-empty product urls

This is not possible.

BAD: fetch all urls for all products, but then don't show urls
if product doesn't have any.

Don't try to coerece cypher into formatting output, use
golang/python/...to pretty-print as you like.

#+begin_example
MATCH (p:Product)
RETURN p.name AS ProductName, p.urls AS URLs;
#+end_example

Results:
#+begin_example
{'ProductName': 'A.1. Sauce', 'URLs': None}
{'ProductName': 'Allspice', 'URLs': None}
{'ProductName': 'Almond Milk', 'URLs': None}
{'ProductName': 'Almonds - bulk roasted or raw -- whichever is cheaper', 'URLs': None}
{'ProductName': 'Angkor Cambodian Food Paste Lemongrass', 'URLs': None}
{'ProductName': 'Apple Cider Vinegar', 'URLs': None}
{'ProductName': 'Apples', 'URLs': None}
{'ProductName': 'Aroy-D Coconut Milk', 'URLs': ['https://www.google.com/search?sca_esv=581110607&sxsrf=AM9HkKlvxPZkhbmImtTjzpzoOo0bggx5gA:1699596383961&q=aroy-d+coconut+milk&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjq0uj14biCAxW7GTQIHT6CDx0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2', 'https://www.templeofthai.com/food/coconut-milk/aroy-d-large', 'https://www.zhicayfoods.com/products/aroy-d-coconut-milk-original']}
{'ProductName': 'Aroy-D Red Curry Paste', 'URLs': ['https://www.google.com/search?sca_esv=579549787&sxsrf=AM9HkKlJ1akktSB6XfxzBxrRxM_VM-9vxA:1699158988679&q=aroy-d+red+curry+paste', 'https://www.youtube.com/watch?v=GC7ccNKatVU']}
{'ProductName': 'Artichoke Hearts', 'URLs': None}
# ...truncated to 10 for brevity
#+end_example

* get products with non-empty url lists


#+begin_example
MATCH (p:Product)
WHERE p.urls IS NOT NULL AND SIZE(p.urls) > 0
RETURN p.name AS ProductName, p.urls AS URLs;
#+end_example

Results:
#+begin_example
{'ProductName': 'Aroy-D Coconut Milk', 'URLs': ['https://www.google.com/search?sca_esv=581110607&sxsrf=AM9HkKlvxPZkhbmImtTjzpzoOo0bggx5gA:1699596383961&q=aroy-d+coconut+milk&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjq0uj14biCAxW7GTQIHT6CDx0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2', 'https://www.templeofthai.com/food/coconut-milk/aroy-d-large', 'https://www.zhicayfoods.com/products/aroy-d-coconut-milk-original']}
{'ProductName': 'Aroy-D Red Curry Paste', 'URLs': ['https://www.google.com/search?sca_esv=579549787&sxsrf=AM9HkKlJ1akktSB6XfxzBxrRxM_VM-9vxA:1699158988679&q=aroy-d+red+curry+paste', 'https://www.youtube.com/watch?v=GC7ccNKatVU']}
{'ProductName': 'Baked Tofu', 'URLs': ['https://www.google.com/search?sca_esv=579179295&sxsrf=AM9HkKnAjZCHvxR_pYrcL19p0l0Qjk1Zjg:1699032994034&q=Baked+Tofu&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiwrsiQr6iCAxXHHjQIHVGWDjkQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2']}
{'ProductName': 'Bonito Flakes', 'URLs': ['https://chefjacooks.com/en/wprm_print/7506', 'https://www.amazon.com/Kaneso-Tokuyou-Hanakatsuo-Bonito-Flakes/dp/B0052BGLMS', 'https://www.google.com/search?sca_esv=577907868&sxsrf=AM9HkKmChgo0Ktu9IlnGTSWuzmK5YqQsiQ:1698696041201&q=Bonito+Flakes&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjy0Pfwx56CAxUBODQIHey0BwcQ0pQJegQIDhAB&biw=1440&bih=758&dpr=2']}
{'ProductName': 'brownie clif bar', 'URLs': ['https://shop.clifbar.com/collections/clif-bar']}
{'ProductName': 'Buckwheat Soba Nodles', 'URLs': ['https://www.amazon.com/gp/product/B00101YEBO', 'https://veggiekinsblog.com/2020/01/13/vegan-zaru-soba/']}
{'ProductName': 'Candlenuts', 'URLs': ['https://www.google.com/search?client=emacs&sca_esv=580758711&sxsrf=AM9HkKmwGL8OAnRZ8-PJqCLp_VU9-SlJfg:1699507479310&q=Candlenuts&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiwsOPclraCAxVVETQIHabkCi0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2#imgrc=7uHbBToP7aPjSM']}
{'ProductName': 'Chili Sauce', 'URLs': ['https://thewoksoflife.com/wp-content/uploads/2020/07/chili-oil-recipe-18.jpg', 'https://www.amazon.com/%E8%80%81%E5%B9%B2%E5%A6%88%E9%A6%99%E8%BE%A3%E8%84%86%E6%B2%B9%E8%BE%A3%E6%A4%92-Spicy-Chili-Crisp-7-41/dp/B07VHKTTR3/ref=asc_df_B07VHKTTR3/?tag=hyprod-20&linkCode=df0&hvadid=642112947349&hvpos=&hvnetw=g&hvrand=12580253979732381700&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-1951193779579&psc=1', 'https://www.google.com/search?sca_esv=580857096&sxsrf=AM9HkKmLh9FDQ0x5jNY12kJCSSbwO6Q3FA:1699539552211&q=thai+and+true+hot+chili&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiJ8KiajreCAxWqAjQIHaMBDKYQ0pQJegQIDBAB&biw=1440&bih=754&dpr=2#imgrc=KDhcVOHe9yNjkM', 'https://photos.google.com/photo/AF1QipMQPtIdU1_m3SkgBWs5RcE2QXFs2OnbbJAdaG9M']}
{'ProductName': 'Dashi', 'URLs': ['https://en.wikipedia.org/wiki/Dashi']}
{'ProductName': 'Dried Shrimp', 'URLs': ['https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883', 'https://www.google.com/search?sca_esv=579651652&sxsrf=AM9HkKlBKUS5rDWtKoKSgxss4PSHC4u0jA:1699211859653&q=bdmp+dried+shrimp&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwiUtKu6ya2CAxVFIjQIHXeICOQQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2#imgrc=_WqiWb3wPqLdYM', 'https://www.youtube.com/watch?v=dBSmCwUXZF0']}
# ...truncated to 10 for brevity
#+end_example

* Candlenuts...really?  What recipe calls for that?


#+begin_example
// ok:
// MATCH (r:Recipe)-[:CONTAINS]->(p:Product {name: 'Candlenuts'})
// RETURN r.name AS Recipe, r.urls AS RecipeURLs;

// better to use case insensitive:
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WHERE p.name =~ '(?i)Candlenuts'
RETURN r.name AS Recipe, r.urls AS RecipeURLs;
#+end_example

Results:
#+begin_example
{'Recipe': 'Laksa', 'RecipeURLs': ['https://hot-thai-kitchen.com/singaporean-laksa/print/7645/', 'https://hot-thai-kitchen.com/singaporean-laksa/', 'https://www.youtube.com/watch?v=cWtnFKFiB_0']}
#+end_example

* list products with at least one url


#+begin_example
MATCH (p:Product)
WHERE size(p.urls) > 0
RETURN p.name AS ProductName, p.urls AS URLs;
#+end_example

Results:
#+begin_example
{'ProductName': 'Aroy-D Coconut Milk', 'URLs': ['https://www.google.com/search?sca_esv=581110607&sxsrf=AM9HkKlvxPZkhbmImtTjzpzoOo0bggx5gA:1699596383961&q=aroy-d+coconut+milk&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjq0uj14biCAxW7GTQIHT6CDx0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2', 'https://www.templeofthai.com/food/coconut-milk/aroy-d-large', 'https://www.zhicayfoods.com/products/aroy-d-coconut-milk-original']}
{'ProductName': 'Aroy-D Red Curry Paste', 'URLs': ['https://www.google.com/search?sca_esv=579549787&sxsrf=AM9HkKlJ1akktSB6XfxzBxrRxM_VM-9vxA:1699158988679&q=aroy-d+red+curry+paste', 'https://www.youtube.com/watch?v=GC7ccNKatVU']}
{'ProductName': 'Baked Tofu', 'URLs': ['https://www.google.com/search?sca_esv=579179295&sxsrf=AM9HkKnAjZCHvxR_pYrcL19p0l0Qjk1Zjg:1699032994034&q=Baked+Tofu&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiwrsiQr6iCAxXHHjQIHVGWDjkQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2']}
{'ProductName': 'Bonito Flakes', 'URLs': ['https://chefjacooks.com/en/wprm_print/7506', 'https://www.amazon.com/Kaneso-Tokuyou-Hanakatsuo-Bonito-Flakes/dp/B0052BGLMS', 'https://www.google.com/search?sca_esv=577907868&sxsrf=AM9HkKmChgo0Ktu9IlnGTSWuzmK5YqQsiQ:1698696041201&q=Bonito+Flakes&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjy0Pfwx56CAxUBODQIHey0BwcQ0pQJegQIDhAB&biw=1440&bih=758&dpr=2']}
{'ProductName': 'brownie clif bar', 'URLs': ['https://shop.clifbar.com/collections/clif-bar']}
{'ProductName': 'Buckwheat Soba Nodles', 'URLs': ['https://www.amazon.com/gp/product/B00101YEBO', 'https://veggiekinsblog.com/2020/01/13/vegan-zaru-soba/']}
{'ProductName': 'Candlenuts', 'URLs': ['https://www.google.com/search?client=emacs&sca_esv=580758711&sxsrf=AM9HkKmwGL8OAnRZ8-PJqCLp_VU9-SlJfg:1699507479310&q=Candlenuts&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiwsOPclraCAxVVETQIHabkCi0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2#imgrc=7uHbBToP7aPjSM']}
{'ProductName': 'Chili Sauce', 'URLs': ['https://thewoksoflife.com/wp-content/uploads/2020/07/chili-oil-recipe-18.jpg', 'https://www.amazon.com/%E8%80%81%E5%B9%B2%E5%A6%88%E9%A6%99%E8%BE%A3%E8%84%86%E6%B2%B9%E8%BE%A3%E6%A4%92-Spicy-Chili-Crisp-7-41/dp/B07VHKTTR3/ref=asc_df_B07VHKTTR3/?tag=hyprod-20&linkCode=df0&hvadid=642112947349&hvpos=&hvnetw=g&hvrand=12580253979732381700&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-1951193779579&psc=1', 'https://www.google.com/search?sca_esv=580857096&sxsrf=AM9HkKmLh9FDQ0x5jNY12kJCSSbwO6Q3FA:1699539552211&q=thai+and+true+hot+chili&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiJ8KiajreCAxWqAjQIHaMBDKYQ0pQJegQIDBAB&biw=1440&bih=754&dpr=2#imgrc=KDhcVOHe9yNjkM', 'https://photos.google.com/photo/AF1QipMQPtIdU1_m3SkgBWs5RcE2QXFs2OnbbJAdaG9M']}
{'ProductName': 'Dashi', 'URLs': ['https://en.wikipedia.org/wiki/Dashi']}
{'ProductName': 'Dried Shrimp', 'URLs': ['https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883', 'https://www.google.com/search?sca_esv=579651652&sxsrf=AM9HkKlBKUS5rDWtKoKSgxss4PSHC4u0jA:1699211859653&q=bdmp+dried+shrimp&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwiUtKu6ya2CAxVFIjQIHXeICOQQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2#imgrc=_WqiWb3wPqLdYM', 'https://www.youtube.com/watch?v=dBSmCwUXZF0']}
# ...truncated to 10 for brevity
#+end_example

* list product properties

A product may or may not have any one of these properties.

#+begin_example
MATCH (n:Product)
WITH DISTINCT keys(n) AS propertyNamesList
UNWIND propertyNamesList AS propertyName
RETURN DISTINCT propertyName
ORDER BY toLower(propertyName);
#+end_example

Results:
#+begin_example
{'propertyName': 'brand'}
{'propertyName': 'comments'}
{'propertyName': 'detail'}
{'propertyName': 'details'}
{'propertyName': 'name'}
{'propertyName': 'notes'}
{'propertyName': 'search'}
{'propertyName': 'type'}
{'propertyName': 'urls'}
#+end_example

* list PURCHASE-AT relation properties

Find all the PURCHASE-AT relations and aggreget the list of
properties seen.

#+begin_example
MATCH ()-[r:PURCHASE_AT]->()
UNWIND keys(r) AS propertyNames
RETURN DISTINCT propertyNames;
#+end_example

Results:
#+begin_example
{'propertyNames': 'urls'}
{'propertyNames': 'aisle'}
{'propertyNames': 'url'}
#+end_example

* list case-insensitive properties for all entities


#+begin_example
MATCH (n)
UNWIND keys(n) AS propertyName
RETURN DISTINCT propertyName
ORDER BY toLower(propertyName);
#+end_example

Results:
#+begin_example
{'propertyName': 'brand'}
{'propertyName': 'comments'}
{'propertyName': 'detail'}
{'propertyName': 'details'}
{'propertyName': 'name'}
{'propertyName': 'notes'}
{'propertyName': 'origin'}
{'propertyName': 'search'}
{'propertyName': 'type'}
{'propertyName': 'urls'}
{'propertyName': 'ytb'}
#+end_example

* BAD: list properties for all entities

It's good becaues it lists properties for node entities

but

Its bad because it doesn't list properties for relation entities.

[[GOOD: list properties across all entities]] fixes this problem.

#+begin_example
MATCH (n)
UNWIND keys(n) AS propertyName
RETURN DISTINCT propertyName;
#+end_example

Results:
#+begin_example
{'propertyName': 'name'}
{'propertyName': 'urls'}
{'propertyName': 'ytb'}
{'propertyName': 'origin'}
{'propertyName': 'notes'}
{'propertyName': 'type'}
{'propertyName': 'brand'}
{'propertyName': 'comments'}
{'propertyName': 'details'}
{'propertyName': 'search'}
{'propertyName': 'detail'}
#+end_example

* GOOD: list properties across all entities

Get properties of nodes and then get properties of relation
entities and then aggregate them into one list.

#+begin_example
MATCH (n)
UNWIND keys(n) AS propertyName
RETURN DISTINCT 'Node' AS type, propertyName
ORDER BY type, propertyName

UNION

MATCH ()-[r]-()
UNWIND keys(r) AS propertyNames
RETURN DISTINCT type(r) AS type, propertyNames AS propertyName
ORDER BY type, propertyName;
#+end_example

Results:
#+begin_example
{'type': 'Node', 'propertyName': 'brand'}
{'type': 'Node', 'propertyName': 'comments'}
{'type': 'Node', 'propertyName': 'detail'}
{'type': 'Node', 'propertyName': 'details'}
{'type': 'Node', 'propertyName': 'name'}
{'type': 'Node', 'propertyName': 'notes'}
{'type': 'Node', 'propertyName': 'origin'}
{'type': 'Node', 'propertyName': 'search'}
{'type': 'Node', 'propertyName': 'type'}
{'type': 'Node', 'propertyName': 'urls'}
{'type': 'Node', 'propertyName': 'ytb'}
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'substitutes'}
{'type': 'CONTAINS', 'propertyName': 'urls'}
{'type': 'PURCHASE_AT', 'propertyName': 'aisle'}
{'type': 'PURCHASE_AT', 'propertyName': 'url'}
{'type': 'PURCHASE_AT', 'propertyName': 'urls'}
{'type': 'RECOMMENDS', 'propertyName': 'urls'}
#+end_example

* find products with stores for each


#+begin_example
MATCH (p:Product)-[:PURCHASE_AT]->(s:Store)
RETURN p.name AS ProductName, s.name AS Store, p.type as Type;
#+end_example

Results:
#+begin_example
{'ProductName': 'Gochugaru', 'Store': 'Amazon', 'Type': 'Gochugaru'}
{'ProductName': 'Cleanser - Bon Ami', 'Store': 'Bartell', 'Type': 'Cleanser'}
{'ProductName': 'Crest', 'Store': 'Bartell', 'Type': 'Toothpaste'}
{'ProductName': 'ACT Restoring Mouthwash', 'Store': 'Bartell', 'Type': 'Mouthwash'}
{'ProductName': 'Marketspice Tea Decaf - 2 Oz for Mommy', 'Store': 'Bartell', 'Type': 'Marketspice Tea'}
{'ProductName': 'Sonicare soft bristles', 'Store': 'Bartell', 'Type': 'Sonicare Bristles'}
{'ProductName': 'Extra Sharp Cheddar Cheese', 'Store': 'dummy place holder', 'Type': 'Cheese'}
{'ProductName': 'Soy Sauce - Liquid Aminos', 'Store': 'dummy place holder', 'Type': 'Sauce'}
{'ProductName': 'Kidney Beans - S&W', 'Store': 'dummy place holder', 'Type': 'Kidney Beans'}
{'ProductName': 'Pancake Mix - Snoqualmie Falls Lodge', 'Store': 'dummy place holder', 'Type': 'Mix'}
# ...truncated to 10 for brevity
#+end_example

* find product purchasing info

Where the hell do I buy this crap? This is list of products that
I've not yet assiged a store with the PURCHASE-AT relation.

#+begin_example
MATCH (p:Product)
WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
RETURN p.name AS ProductName
ORDER BY toLower(ProductName);
#+end_example

Results:
#+begin_example
{'ProductName': 'Aroy-D Coconut Milk'}
{'ProductName': 'Black beans'}
{'ProductName': 'Candlenuts'}
{'ProductName': 'Coconut Aminos'}
{'ProductName': 'Cooking Oil'}
{'ProductName': 'Corn on cob'}
{'ProductName': 'Dashi'}
{'ProductName': 'Dried Thai Chilis'}
{'ProductName': 'Egg yolk'}
{'ProductName': 'Fish Sauce'}
{'ProductName': 'Fried shallots'}
{'ProductName': 'Ice-cold water'}
{'ProductName': 'Kaffir Lime'}
{'ProductName': 'Kalamata Olives'}
{'ProductName': 'Korean Wild Sesame Oil'}
{'ProductName': 'Laksa leaves'}
{'ProductName': 'Makrut lime zest'}
{'ProductName': 'Mild dried red chilies'}
{'ProductName': 'Miso'}
{'ProductName': "Newman's Own Sesame Ginger Dressing"}
{'ProductName': 'Red Curry Paste'}
{'ProductName': 'Rosemary'}
{'ProductName': 'Salt and pepper'}
{'ProductName': 'Salted Turnip'}
{'ProductName': 'Sambal'}
{'ProductName': 'Sawtooth Coriander'}
{'ProductName': 'Sea Salt'}
{'ProductName': 'Shrimp Paste'}
{'ProductName': 'Spicy dried red chilies'}
{'ProductName': 'Thai Black Soy Sauce'}
{'ProductName': 'Thai chili'}
{'ProductName': 'Thai shrimp paste'}
{'ProductName': 'Toasted sesame flakes'}
{'ProductName': 'Tofu puffs'}
{'ProductName': 'Tsuyu'}
{'ProductName': 'Turmeric'}
{'ProductName': 'Unsweetened Nut Butter'}
{'ProductName': 'Wasabi'}
{'ProductName': 'Yellow Bell Pepper'}
#+end_example

* dammit this is tedious, how much cleanup remains?

When I check out where to buy stuff, I find lots of things I have
no clue where to get.

Count how many of those mystery product locations I need to figure
out.

#+begin_example
MATCH (p:Product)
WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
RETURN COUNT(p) AS ProductCount;
#+end_example

Results:
#+begin_example
{'ProductCount': 39}
#+end_example

* list count of items not associated with a store


#+begin_example
MATCH (p:Product)
WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
WITH p.name AS ProductName, count(p) AS Count
ORDER BY toLower(ProductName)
WITH COLLECT({ProductName: ProductName, Count: Count}) AS products
UNWIND RANGE(0, SIZE(products)-1) AS ItemNumber
RETURN ItemNumber + 1 AS ItemNumber, products[ItemNumber].ProductName AS ProductName;
#+end_example

Results:
#+begin_example
{'ItemNumber': 1, 'ProductName': 'Aroy-D Coconut Milk'}
{'ItemNumber': 2, 'ProductName': 'Black beans'}
{'ItemNumber': 3, 'ProductName': 'Candlenuts'}
{'ItemNumber': 4, 'ProductName': 'Coconut Aminos'}
{'ItemNumber': 5, 'ProductName': 'Cooking Oil'}
{'ItemNumber': 6, 'ProductName': 'Corn on cob'}
{'ItemNumber': 7, 'ProductName': 'Dashi'}
{'ItemNumber': 8, 'ProductName': 'Dried Thai Chilis'}
{'ItemNumber': 9, 'ProductName': 'Egg yolk'}
{'ItemNumber': 10, 'ProductName': 'Fish Sauce'}
{'ItemNumber': 11, 'ProductName': 'Fried shallots'}
{'ItemNumber': 12, 'ProductName': 'Ice-cold water'}
{'ItemNumber': 13, 'ProductName': 'Kaffir Lime'}
{'ItemNumber': 14, 'ProductName': 'Kalamata Olives'}
{'ItemNumber': 15, 'ProductName': 'Korean Wild Sesame Oil'}
{'ItemNumber': 16, 'ProductName': 'Laksa leaves'}
{'ItemNumber': 17, 'ProductName': 'Makrut lime zest'}
{'ItemNumber': 18, 'ProductName': 'Mild dried red chilies'}
{'ItemNumber': 19, 'ProductName': 'Miso'}
{'ItemNumber': 20, 'ProductName': "Newman's Own Sesame Ginger Dressing"}
{'ItemNumber': 21, 'ProductName': 'Red Curry Paste'}
{'ItemNumber': 22, 'ProductName': 'Rosemary'}
{'ItemNumber': 23, 'ProductName': 'Salt and pepper'}
{'ItemNumber': 24, 'ProductName': 'Salted Turnip'}
{'ItemNumber': 25, 'ProductName': 'Sambal'}
{'ItemNumber': 26, 'ProductName': 'Sawtooth Coriander'}
{'ItemNumber': 27, 'ProductName': 'Sea Salt'}
{'ItemNumber': 28, 'ProductName': 'Shrimp Paste'}
{'ItemNumber': 29, 'ProductName': 'Spicy dried red chilies'}
{'ItemNumber': 30, 'ProductName': 'Thai Black Soy Sauce'}
{'ItemNumber': 31, 'ProductName': 'Thai chili'}
{'ItemNumber': 32, 'ProductName': 'Thai shrimp paste'}
{'ItemNumber': 33, 'ProductName': 'Toasted sesame flakes'}
{'ItemNumber': 34, 'ProductName': 'Tofu puffs'}
{'ItemNumber': 35, 'ProductName': 'Tsuyu'}
{'ItemNumber': 36, 'ProductName': 'Turmeric'}
{'ItemNumber': 37, 'ProductName': 'Unsweetened Nut Butter'}
{'ItemNumber': 38, 'ProductName': 'Wasabi'}
{'ItemNumber': 39, 'ProductName': 'Yellow Bell Pepper'}
#+end_example

* BAD: items not associated with a store (count)


#+begin_example
MATCH (p:Product)
WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
WITH p.name AS ProductName, count(p) AS Count
ORDER BY toLower(ProductName)
WITH COLLECT({ProductName: ProductName, Count: Count}) AS products
UNWIND RANGE(0, SIZE(products)-1) AS ItemNumber
RETURN (ItemNumber + 1) + '. ' + products[ItemNumber].ProductName;
#+end_example

Results:
#+begin_example
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '1. Aroy-D Coconut Milk'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '2. Black beans'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '3. Candlenuts'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '4. Coconut Aminos'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '5. Cooking Oil'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '6. Corn on cob'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '7. Dashi'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '8. Dried Thai Chilis'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '9. Egg yolk'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '10. Fish Sauce'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '11. Fried shallots'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '12. Ice-cold water'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '13. Kaffir Lime'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '14. Kalamata Olives'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '15. Korean Wild Sesame Oil'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '16. Laksa leaves'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '17. Makrut lime zest'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '18. Mild dried red chilies'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '19. Miso'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": "20. Newman's Own Sesame Ginger Dressing"}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '21. Red Curry Paste'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '22. Rosemary'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '23. Salt and pepper'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '24. Salted Turnip'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '25. Sambal'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '26. Sawtooth Coriander'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '27. Sea Salt'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '28. Shrimp Paste'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '29. Spicy dried red chilies'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '30. Thai Black Soy Sauce'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '31. Thai chili'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '32. Thai shrimp paste'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '33. Toasted sesame flakes'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '34. Tofu puffs'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '35. Tsuyu'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '36. Turmeric'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '37. Unsweetened Nut Butter'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '38. Wasabi'}
{"(ItemNumber + 1) + '. ' + products[ItemNumber].ProductName": '39. Yellow Bell Pepper'}
#+end_example

* find purchasing info for 10 products

list products that don't have a store associated with them, but
limit to 10

Data cleanup is a pain in the ass and I want to take it in bite
size pieces, so randomize the list to keep me interested and
return just 10 to keep me from being disheartended.

#+begin_example
// fail:
// MATCH (product:Product)
// WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
// WITH product
// ORDER BY RAND()
// RETURN product.name AS ProductName
// ORDER BY ProductName
// LIMIT 10;

// fail:
// MATCH (product:Product)
// WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
// WITH product
// ORDER BY RAND()
// WITH COLLECT(product) AS randomProducts
// UNWIND randomProducts AS product
// RETURN product.name AS ProductName
// ORDER BY ProductName
// LIMIT 10;

// fail:
// MATCH (product:Product)
// WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
// WITH product
// ORDER BY RAND()
// LIMIT 10
// RETURN product.name AS ProductName;

// fail:
// MATCH (product:Product)
// WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
// WITH product
// ORDER BY RAND()
// LIMIT 10
// WITH COLLECT(product) AS randomProducts
// UNWIND randomProducts AS product
// ORDER BY product.name
// RETURN product.name AS ProductName;

// works:
MATCH (product:Product)
WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
WITH product
ORDER BY RAND()
LIMIT 10
RETURN product.name AS ProductName
ORDER BY ProductName;
#+end_example

Results:
#+begin_example
{'ProductName': 'Cooking Oil'}
{'ProductName': 'Ice-cold water'}
{'ProductName': 'Kalamata Olives'}
{'ProductName': 'Miso'}
{'ProductName': "Newman's Own Sesame Ginger Dressing"}
{'ProductName': 'Salt and pepper'}
{'ProductName': 'Thai shrimp paste'}
{'ProductName': 'Toasted sesame flakes'}
{'ProductName': 'Tsuyu'}
{'ProductName': 'Yellow Bell Pepper'}
#+end_example

* BAD: list the entity type the property is assocted with

This is crap.  Results are duplicated.

#+begin_example
MATCH (n)
UNWIND labels(n) AS label
UNWIND keys(n) AS propertyName
RETURN label, propertyName;
#+end_example

Results:
#+begin_example
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
# ...truncated to 10 for brevity
#+end_example

* GOOD: list the entity type the property is assocted with

Here's how we can add distinct to eliminates duplicates...makes it
not crap.

#+begin_example
MATCH (n)
UNWIND labels(n) AS label
UNWIND keys(n) AS propertyName
RETURN DISTINCT label, propertyName;
#+end_example

Results:
#+begin_example
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
{'label': 'Person', 'propertyName': 'ytb'}
{'label': 'Recipe', 'propertyName': 'name'}
{'label': 'Recipe', 'propertyName': 'urls'}
{'label': 'Store', 'propertyName': 'name'}
{'label': 'Store', 'propertyName': 'urls'}
{'label': 'Store', 'propertyName': 'origin'}
{'label': 'Store', 'propertyName': 'notes'}
{'label': 'Product', 'propertyName': 'type'}
{'label': 'Product', 'propertyName': 'name'}
{'label': 'Product', 'propertyName': 'urls'}
{'label': 'Product', 'propertyName': 'brand'}
{'label': 'Product', 'propertyName': 'comments'}
{'label': 'Product', 'propertyName': 'details'}
{'label': 'Product', 'propertyName': 'notes'}
{'label': 'Product', 'propertyName': 'search'}
{'label': 'Product', 'propertyName': 'detail'}
#+end_example

* list unique entities


#+begin_example
MATCH (n)
WITH DISTINCT labels(n) AS distinctLabels, keys(n) AS propertyNames
UNWIND distinctLabels AS label
UNWIND propertyNames AS propertyName
RETURN DISTINCT label, propertyName;
#+end_example

Results:
#+begin_example
{'label': 'Person', 'propertyName': 'name'}
{'label': 'Person', 'propertyName': 'urls'}
{'label': 'Person', 'propertyName': 'ytb'}
{'label': 'Recipe', 'propertyName': 'name'}
{'label': 'Recipe', 'propertyName': 'urls'}
{'label': 'Store', 'propertyName': 'name'}
{'label': 'Store', 'propertyName': 'urls'}
{'label': 'Store', 'propertyName': 'origin'}
{'label': 'Store', 'propertyName': 'notes'}
{'label': 'Product', 'propertyName': 'type'}
{'label': 'Product', 'propertyName': 'name'}
{'label': 'Product', 'propertyName': 'urls'}
{'label': 'Product', 'propertyName': 'brand'}
{'label': 'Product', 'propertyName': 'comments'}
{'label': 'Product', 'propertyName': 'details'}
{'label': 'Product', 'propertyName': 'notes'}
{'label': 'Product', 'propertyName': 'search'}
{'label': 'Product', 'propertyName': 'detail'}
#+end_example

* list CONTAINS relationships

This doesn't help in the least bit...the properties are
identical...find a better way.

#+begin_example
MATCH ()-[r:CONTAINS]-()
UNWIND keys(r) AS propertyNames
RETURN type(r) AS type, propertyNames AS propertyName
ORDER BY type, propertyName;
#+end_example

Results:
#+begin_example
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'quantity'}
# ...truncated to 5 for brevity
#+end_example

* list unique CONTAINS relationships


#+begin_example
MATCH ()-[r:CONTAINS]-()
UNWIND keys(r) AS propertyNames
RETURN DISTINCT type(r) AS type, propertyNames AS propertyName
ORDER BY type, propertyName;
#+end_example

Results:
#+begin_example
{'type': 'CONTAINS', 'propertyName': 'quantity'}
{'type': 'CONTAINS', 'propertyName': 'substitutes'}
{'type': 'CONTAINS', 'propertyName': 'urls'}
#+end_example

* list products with Google Drive photo urls

This fails
#+begin_example
MATCH (p:Product)
WHERE EXISTS(p.urls) AND ANY(url IN p.urls WHERE url CONTAINS 'google')
RETURN p.name AS ProductName, p.urls AS URLs;
#+end_example

with error
#+begin_example
[mtm@Shane-s-Note:poorclaim(master)]$ cypher-shell -a neo4j://localhost:7687 --file /Users/mtm/pdev/taylormonacelli/anythingflorida/query.cypher
The property existence syntax `... exists(variable.property)` is no longer supported. Please use `variable.property IS NOT NULL` instead. (line 2, column 7 (offset: 24))
"WHERE EXISTS(p.urls) AND ANY(url IN p.urls WHERE url CONTAINS 'google')"
     ^
[mtm@Shane-s-Note:poorclaim(master)]$
#+end_example

#+begin_example
// this works as expected:

MATCH (p:Product)
WHERE p.urls IS NOT NULL AND ANY(url IN p.urls WHERE url CONTAINS 'photos.google.com')
RETURN p.name AS ProductName, p.urls AS URLs;
#+end_example

Results:
#+begin_example
{'ProductName': 'Chili Sauce', 'URLs': ['https://thewoksoflife.com/wp-content/uploads/2020/07/chili-oil-recipe-18.jpg', 'https://www.amazon.com/%E8%80%81%E5%B9%B2%E5%A6%88%E9%A6%99%E8%BE%A3%E8%84%86%E6%B2%B9%E8%BE%A3%E6%A4%92-Spicy-Chili-Crisp-7-41/dp/B07VHKTTR3/ref=asc_df_B07VHKTTR3/?tag=hyprod-20&linkCode=df0&hvadid=642112947349&hvpos=&hvnetw=g&hvrand=12580253979732381700&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-1951193779579&psc=1', 'https://www.google.com/search?sca_esv=580857096&sxsrf=AM9HkKmLh9FDQ0x5jNY12kJCSSbwO6Q3FA:1699539552211&q=thai+and+true+hot+chili&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiJ8KiajreCAxWqAjQIHaMBDKYQ0pQJegQIDBAB&biw=1440&bih=754&dpr=2#imgrc=KDhcVOHe9yNjkM', 'https://photos.google.com/photo/AF1QipMQPtIdU1_m3SkgBWs5RcE2QXFs2OnbbJAdaG9M']}
{'ProductName': 'Dried Shrimp', 'URLs': ['https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883', 'https://www.google.com/search?sca_esv=579651652&sxsrf=AM9HkKlBKUS5rDWtKoKSgxss4PSHC4u0jA:1699211859653&q=bdmp+dried+shrimp&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwiUtKu6ya2CAxVFIjQIHXeICOQQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2#imgrc=_WqiWb3wPqLdYM', 'https://www.youtube.com/watch?v=dBSmCwUXZF0']}
{'ProductName': 'Eucerin Creme Daily Moisturizing Skin Calming', 'URLs': ['https://photos.google.com/photo/AF1QipM2_uDtc-2Uc7XriFP3k4H0L_DxcvxVeYvgUlpG', 'https://photos.google.com/photo/AF1QipM2_uDtc-2Uc7XriFP3k4H0L_DxcvxVeYvgUlpG']}
{'ProductName': 'Jasmine Rice', 'URLs': ['https://photos.google.com/photo/AF1QipM0ragYoS8EjrRngQukQJH_U1hnen_ACdJyMqEV']}
{'ProductName': 'Kaffir lime leaves', 'URLs': ['https://www.wholefoodsmarket.com/product/kaffir-lime%20leaves-b07q8ldbvj', 'https://www.youtube.com/watch?v=4Qz5nC-DcKk', 'https://www.safeway.com/shop/marketplace/product-details.970537048.html', 'https://photos.google.com/photo/AF1QipPI_6_YxYIuCSAvP93sDoRcyFDjekCQjNSb3Ln0', 'https://photos.google.com/photo/AF1QipPd_yNuI9VcQAFOwMSuvBx40o_sl4gAmCgBYNIQ', 'https://www.youtube.com/watch?v=SB3AV7oHKiE']}
{'ProductName': 'Mint leaves', 'URLs': ['https://photos.google.com/photo/AF1QipNrbFzt7g3nCOVFOmFa6geW-HODg2hilRdq4xl0']}
{'ProductName': 'Perilla Oil', 'URLs': ['https://www.youtube.com/watch?v=VpAS3RarPi8', 'https://megakfood.com/products/8801045448503', 'https://photos.google.com/photo/AF1QipNe7d-KXSpC90FJ1uJNMnH1fMFZ6E8Qlzr_j3Q0', 'https://photos.google.com/photo/AF1QipOLrXnJ8Bj20xFh5lg5yhm71ApUoRlT1z6_ZqnB', 'https://photos.google.com/photo/AF1QipP8OZZvarZPkNnnaOOv3k_ng9doQzMeVZgONlxK']}
{'ProductName': 'Rice noodle sheets', 'URLs': ['https://www.google.com/search?sca_esv=579554252&sxsrf=AM9HkKlaWKZFra1JEJmQLagqVwu7lOpvPA:1699161392487&q=rice+paper&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjyhdy5jayCAxWmADQIHTJBBhUQ0pQJegQIDxAB&biw=1440&bih=758&dpr=2', 'https://balancewithjess.com/hu-tieu-ap-chao/', 'https://www.google.com/search?q=hu+tieu+xao+rice+sheets&tbm=isch&ved=2ahUKEwjExZejjayCAxU_JjQIHf97ACQQ2-cCegQIABAA&oq=hu+tieu+xao+rice+sheets&gs_lcp=CgNpbWcQAzoECCMQJzoFCAAQgAQ6BwgAEIoFEEM6BwgAEBgQgARQvQRYpRdgxRpoAHAAeACAATmIAecEkgECMTOYAQCgAQGqAQtnd3Mtd2l6LWltZ8ABAQ&sclient=img&ei=ASVHZYTBDb_M0PEP__eBoAI&bih=758&biw=1440#imgrc=il_S9C1t9kGChM', 'https://www.foodsofjane.com/recipes/steamed-rice-rolls', 'https://www.google.com/search?client=emacs&sca_esv=579554252&sxsrf=AM9HkKkMHZcCbxpmpXqsj48WrwEW--xssw:1699161240321&q=Rice+noodle+sheets&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiPypTxjKyCAxW_MDQIHVJjDeYQ0pQJegQIDBAB&biw=1440&bih=758&dpr=2#imgrc=Vw7_7S7XaN_v6M', 'https://photos.google.com/photo/AF1QipPM6Ts-zLh2dl10ono15alL7hCGwSCHhbOyav6v', 'https://phohoa.com/', 'https://www.google.com/search?q=pho+hoa+seattle&oq=pho+hoa+seatt&gs_lcrp=EgZjaHJvbWUqCggAEAAY4wIYgAQyCggAEAAY4wIYgAQyEAgBEC4YrwEYxwEYgAQYjgUyBggCEEUYOTIICAMQABgWGB4yCAgEEC4YFhgeMgoIBRAAGIYDGIoFMgYIBhBFGEDSAQg1Mjk1ajBqN6gCALACAA&sourceid=chrome&ie=UTF-8#lpg=cid:CgIgAQ%3D%3D,ik:CAoSLEFGMVFpcE40MXM4TXJDSzlDcFVRZWxBRHZPNUZXb1h5LWtIVFpaeHNnZm03', 'https://timeline.google.com/maps/timeline?pli=1&rapt=AEjHL4MhNWvrl4xjhvtinEYv8V8WTyxNYgSR-reE9VJgys6Ba7GccWm6B2Xi6Xa3uKxuR9rkftCXiinZ4f3LvAJGF9CnnqgrtUIGNdtCmaP1EhTNElp4eko&pb=!1m2!1m1!1s2023-11-04', 'https://www.google.com/search?client=emacs&sca_esv=579833118&sxsrf=AM9HkKmyvTZJVTjaoB4T2Is_emhNvlG1og:1699290431734&q=rice+paper&tbm=isch&source=lnms&sa=X&ved=2ahUKEwimz7aU7q-CAxVkFjQIHXrWCSgQ0pQJegQIDhAB&biw=1440&bih=758&dpr=2', 'https://i0.wp.com/www.wokandkin.com/wp-content/uploads/2021/04/Rice-Paper-saved-for-web-1200-px.png?w=1200&ssl=1']}
{'ProductName': 'Rice vermicelli', 'URLs': ['https://photos.google.com/photo/AF1QipPPETrmRSh8-h9guEbb90DRig4g_njAUvQ50Ol6', 'https://photos.google.com/photo/AF1QipMYLPcT9Oybki3TQGztAT1X5tIxpknKSJ0ZmdlP', 'https://www.amazon.com/Fresh-Stick-Vermicelli-SIMPLY-FOOD/dp/B08NXVTFTP/ref=asc_df_B08NXVTFTP/?tag=hyprod-20&linkCode=df0&hvadid=652498065761&hvpos=&hvnetw=g&hvrand=10598234170837115346&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-2065471401768&psc=1', 'https://www.amazon.com/Fresh-Stick-Vermicelli-SIMPLY-FOOD/dp/B08NXVTFTP/ref=asc_df_B08NXVTFTP/?tag=hyprod-20&linkCode=df0&hvadid=652498065761&hvpos=&hvnetw=g&hvrand=10598234170837115346&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-2065471401768&psc=1']}
{'ProductName': 'Signature Care Baby Lotion', 'URLs': ['https://www.google.com/search?client=emacs&sca_esv=580645679&sxsrf=AM9HkKmFAe6c5ttC3Glgq4OAYuHfy2tEjw:1699487253983&q=Signature+Care+baby+lotion&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjopsuwy7WCAxWzFTQIHdjcCGIQ0pQJegQIDhAB&biw=1440&bih=754&dpr=2#imgrc=0Cnl_Uyq2nmiBM', 'https://photos.google.com/photo/AF1QipPtyZkpbFq-ZvHy5JD9WYAiDFBvmkPXB_pFNjPL']}
{'ProductName': 'Tamarind Liquid', 'URLs': ['https://photos.google.com/photo/AF1QipMTNoAmEBIUBgJiziw2Tl16y2KscVqpjfDGlS-q', 'https://photos.google.com/photo/AF1QipPd47xo0JnbBdfR9pbd6FgvPRvxghQoP_wmWxph']}
{'ProductName': 'Mae Ploy Thai Chili Paste in Oil', 'URLs': ['https://youtu.be/hhcYNjeQ_XY?list=PLaS2Ffd8cyD7SL49uWtqbfuUBmLi9nVup&t=433', 'https://photos.google.com/photo/AF1QipNWHU8huzjTXkKBm0l9ehnPAJFm5J_jea8kU5KL']}
#+end_example

* GOOD: list relation entities and their properties

GOOD: list relations, not just CONTAINS and show relation
properties

This fixes the item in section: 'BAD: list relations, not
just CONTAINS and show relation properties'

#+begin_example
MATCH ()-[r]-()
RETURN DISTINCT type(r) AS type,
                CASE WHEN size(keys(r)) > 0 THEN keys(r) ELSE [] END AS propertyNames
ORDER BY type, propertyNames;
#+end_example

Results:
#+begin_example
{'type': 'CONTAINS', 'propertyNames': []}
{'type': 'CONTAINS', 'propertyNames': ['quantity']}
{'type': 'CONTAINS', 'propertyNames': ['quantity', 'urls']}
{'type': 'CONTAINS', 'propertyNames': ['substitutes', 'quantity', 'urls']}
{'type': 'CREATED', 'propertyNames': []}
{'type': 'IS_THE_SAME_AS', 'propertyNames': []}
{'type': 'PURCHASE_AT', 'propertyNames': []}
{'type': 'PURCHASE_AT', 'propertyNames': ['url']}
{'type': 'PURCHASE_AT', 'propertyNames': ['urls']}
{'type': 'PURCHASE_AT', 'propertyNames': ['urls', 'aisle']}
{'type': 'RECOMMENDS', 'propertyNames': ['urls']}
#+end_example

* identify stores for recipe ingredients

suppose I would like to make a particular recipe, then what stores
do I need to visit?

#+begin_example
MATCH (r:Recipe)
WHERE r.name IN ['Vietnamese Spring Rolls (Gá»i Cuá»n)']
WITH r
MATCH (r)-[:CONTAINS]->(p:Product)
OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
WITH p, COLLECT(DISTINCT s) AS stores
RETURN COLLECT(DISTINCT p.name) AS Ingredients,
       [store IN stores | CASE WHEN store IS NOT NULL THEN store.name ELSE 'Unknown' END] AS Stores
ORDER BY [store IN Stores | toLower(store)];
#+end_example

Results:
#+begin_example
{'Ingredients': ['Water'], 'Stores': ['dummy place holder']}
{'Ingredients': ['Shrimp'], 'Stores': ['Hau Hau Market']}
{'Ingredients': ['Rice vermicelli'], 'Stores': ["Lam's Seafood Asian Market"]}
{'Ingredients': ['Mint leaves'], 'Stores': ['M2M Mart', 'Uwajimaya']}
{'Ingredients': ['Dry-Roasted Peanuts'], 'Stores': ['PCC']}
{'Ingredients': ['Lee Kum Kee Sauce Hoisin'], 'Stores': ['QFC']}
{'Ingredients': ['Ginger', 'Adams Peanut Butter', 'Romaine Lettuce', 'Shallots', 'Vegetable Oil'], 'Stores': ['Safeway']}
{'Ingredients': ['Garlic'], 'Stores': ["Trader Joe's"]}
{'Ingredients': ['Rice paper'], 'Stores': ['Uwajimaya']}
#+end_example

* find stores for Chicken Teriyaki ingredients

suppose I were to make Chicken Teriyaki, then what stores need I visit
to get products I'd need for it?

#+begin_example
MATCH (r:Recipe {name: 'Chicken Teriyaki Recipe'})-[:CONTAINS]->(p:Product)
MATCH (p)-[:PURCHASE_AT]->(s:Store)
RETURN s.name AS Store, COLLECT(DISTINCT p.name) AS Ingredients;
#+end_example

Results:
#+begin_example
{'Store': 'Hau Hau Market', 'Ingredients': ['Thai-style Baked Tofu']}
{'Store': 'Thanh Son Tofu', 'Ingredients': ['Thai-style Baked Tofu']}
{'Store': 'Safeway', 'Ingredients': ['Ginger', 'Corn Starch', 'Broccolini', 'Rice Wine Vinegar - Kikkoman Mirin', 'Soy sauce']}
{'Store': 'Uwajimaya', 'Ingredients': ['Rice']}
{'Store': 'dummy place holder', 'Ingredients': ['Water']}
{'Store': 'Madison Co-op', 'Ingredients': ['Chicken Thighs']}
{'Store': "Trader Joe's", 'Ingredients': ['Red Onion', 'Garlic', 'Red Pepper']}
{'Store': 'PCC', 'Ingredients': ['Sesame Seeds']}
{'Store': 'Naked Grocer', 'Ingredients': ['Sesame Seeds']}
{'Store': 'M2M Mart', 'Ingredients': ['Rice Wine Vinegar - Kikkoman Mirin', 'Sake Wine']}
#+end_example

* streamline shopping for recipes

suppose I would like to make 2 recipes, then what stores do I need
to visit?

#+begin_example
MATCH (r:Recipe)
WHERE r.name IN ['Vietnamese Spring Rolls (Gá»i Cuá»n)','Tom Yum Goong']
WITH r
MATCH (r)-[:CONTAINS]->(p:Product)
OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
WITH p, COLLECT(DISTINCT s) AS stores
RETURN COLLECT(DISTINCT p.name) AS Ingredients,
       [store IN stores | CASE WHEN store IS NOT NULL THEN store.name ELSE 'Unknown' END] AS Stores
ORDER BY [store IN Stores | toLower(store)];
#+end_example

Results:
#+begin_example
{'Ingredients': ['Sawtooth Coriander'], 'Stores': []}
{'Ingredients': ['Water'], 'Stores': ['dummy place holder']}
{'Ingredients': ['Shrimp', 'Fish sauce'], 'Stores': ['Hau Hau Market']}
{'Ingredients': ['Rice vermicelli'], 'Stores': ["Lam's Seafood Asian Market"]}
{'Ingredients': ['Mae Ploy Thai Chili Paste in Oil'], 'Stores': ['M2M Mart']}
{'Ingredients': ['Mint leaves'], 'Stores': ['M2M Mart', 'Uwajimaya']}
{'Ingredients': ['Jasmine Rice', 'Dry-Roasted Peanuts'], 'Stores': ['PCC']}
{'Ingredients': ['Ka-Me Whole Peeled Straw Mushrooms', 'Lee Kum Kee Sauce Hoisin'], 'Stores': ['QFC']}
{'Ingredients': ['Lemongrass', 'Evaporated Milk', 'Oyster Mushrooms', 'Ginger', 'Adams Peanut Butter', 'Romaine Lettuce', 'Shallots', 'Vegetable Oil'], 'Stores': ['Safeway']}
{'Ingredients': ['Garlic'], 'Stores': ["Trader Joe's"]}
{'Ingredients': ['Galangal', 'Rice paper'], 'Stores': ['Uwajimaya']}
{'Ingredients': ['Kaffir lime leaves'], 'Stores': ['Uwajimaya', 'Hau Hau Market']}
{'Ingredients': ['Thai chilies'], 'Stores': ['Uwajimaya', "Lam's Seafood Asian Market"]}
{'Ingredients': ['Lime juice'], 'Stores': ['Whole Foods']}
#+end_example

* minimize travel for recipe ingredients

If I would like to make a particular recipe, then what stores do I
need to visit and sort products by stores so I don't have to leave
and return because I didn't realize there were two products from the same store

Also, make sure that if a recipe has an item that is not assigned
to a store by the PURCAHSE_AT relation, then the store field
appears empty as opposed to not seeing the product at all

#+begin_example
MATCH (r:Recipe {name: 'Korean Sesame Noodles'})-[:CONTAINS]->(p:Product)
OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
WITH p, COLLECT(DISTINCT s) AS stores
RETURN COLLECT(DISTINCT p.name) AS Ingredients,
       [store IN stores | CASE WHEN store IS NOT NULL THEN store.name ELSE 'Unknown' END] AS Stores
ORDER BY [store IN Stores | toLower(store)];
#+end_example

Results:
#+begin_example
{'Ingredients': ['Tsuyu', 'Korean Wild Sesame Oil'], 'Stores': []}
{'Ingredients': ['Chili Oil', 'Soba Noodles', 'Toasted Seaweed'], 'Stores': ['M2M Mart']}
{'Ingredients': ['Toasted Sesame Seeds'], 'Stores': ['Madison Co-op']}
{'Ingredients': ['Sesame Seeds'], 'Stores': ['PCC', 'Naked Grocer']}
{'Ingredients': ['Green Onion', 'Red Chilli Peppers'], 'Stores': ['Safeway']}
#+end_example

* BAD: remove duplicate ingredients

BAD: some recipes point to the same product multiple times by
mistake

This doesn't do what I expect.  Need to spend more time iterating.

#+begin_example
MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
WITH r, COLLECT(p) AS products
WHERE SIZE(products) > 1
RETURN r, products;
#+end_example

Results:
#+begin_example
{'r': {'urls': ['https://www.food.com/recipe/easy-black-bean-soup-59796?ftab=reviews#activity-feed'], 'name': 'Easy Black Bean Soup'}, 'products': [{'name': 'Extra Virgin Olive Oil', 'type': 'Olive Oil'}, {'name': 'Salt', 'type': 'Salt'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Ground Cumin', 'type': 'Cumin'}, {'name': 'Onion', 'type': 'Onion'}, {'name': 'Red Onion', 'type': 'Red Onion'}, {'name': 'Black Beans', 'type': 'Black Beans'}, {'name': 'Cilantro', 'type': 'Cilantro'}, {'name': 'Black Pepper', 'type': 'Black Pepper'}, {'name': 'Chicken Broth', 'type': 'Broth'}]}
{'r': {'urls': ['https://theflavoursofkitchen.com/wprm_print/104534'], 'name': 'Chicken Thai Red Curry'}, 'products': [{'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Light Brown Sugar', 'type': 'Brown Sugar'}, {'name': 'Cooking Oil', 'type': 'Cooking Oil'}, {'name': 'Onion', 'type': 'Onion'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Red Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Garlic', 'type': 'Garlic'}, {'urls': ['https://www.fredmeyer.com/p/simple-truth-organic-thai-basil/0001111001922'], 'name': 'Thai basil', 'type': 'Herb'}, {'name': 'Boneless Chicken Thighs', 'type': 'Chicken'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Chicken Stock or Water', 'type': 'Chicken Stock'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'name': 'Zucchini', 'type': 'Zucchini'}, {'name': 'Red Curry Paste', 'type': 'Curry Paste'}, {'name': 'Lemon Juice', 'type': 'Lemon Juice'}]}
{'r': {'urls': ['https://food52.com/recipes/print/86501', 'https://www.youtube.com/watch?v=VpAS3RarPi8'], 'name': 'Cold Soba With Periall Oil dresssing'}, 'products': [{'urls': ['https://www.amazon.com/gp/product/B00101YEBO', 'https://veggiekinsblog.com/2020/01/13/vegan-zaru-soba/'], 'name': 'Buckwheat Soba Nodles', 'type': 'Noodle'}, {'urls': ['https://www.google.com/search?client=emacs&sca_esv=577922779&sxsrf=AM9HkKkUxzT-KjHg9ziVgvqz5Zsqmn7xdw:1698703946500&q=Japanese+nori&tbm=isch&source=lnms&sa=X&ved=2ahUKEwi647yq5Z6CAxVxMjQIHRW8BBYQ0pQJegQIChAB&biw=1440&bih=758&dpr=2'], 'name': 'Japanese Nori', 'type': 'Nori'}, {'urls': ['https://www.youtube.com/watch?v=VpAS3RarPi8', 'https://megakfood.com/products/8801045448503', 'https://photos.google.com/photo/AF1QipNe7d-KXSpC90FJ1uJNMnH1fMFZ6E8Qlzr_j3Q0', 'https://photos.google.com/photo/AF1QipOLrXnJ8Bj20xFh5lg5yhm71ApUoRlT1z6_ZqnB', 'https://photos.google.com/photo/AF1QipP8OZZvarZPkNnnaOOv3k_ng9doQzMeVZgONlxK'], 'name': 'Perilla Oil', 'type': 'Oil'}]}
{'r': {'urls': ['https://cleananddelicious.com/wprm_print/26940'], 'name': 'Crispy Baked Tofu'}, 'products': [{'name': 'Tamari', 'type': 'Tamari'}, {'name': 'Extra Firm Tofu', 'type': 'Tofu'}, {'name': 'Black Pepper', 'type': 'Black Pepper'}, {'name': 'Corn Starch', 'type': 'Corn Starch'}, {'name': 'Avocado Oil', 'type': 'Avocado Oil'}, {'name': 'Morton Salt Kosher Coarse', 'type': 'Kosher Salt'}, {'name': 'Garlic Powder', 'type': 'Garlic'}]}
{'r': {'urls': ['https://seonkyounglongest.com/drunken-noodles/', 'https://seonkyounglongest.com/drunken-noodles/print/27100/'], 'name': 'The Best Drunken Noodles'}, 'products': [{'name': 'Chinese Broccoli', 'type': 'Broccoli'}, {'name': 'Thai chili', 'type': 'Chilies'}, {'name': 'Soy sauce', 'type': 'Soy sauce'}, {'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'White pepper', 'type': 'White pepper'}, {'name': 'Basil', 'type': 'Basil'}, {'name': 'Lime', 'type': 'Lime'}, {'name': 'Pork', 'type': 'Pork'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'search': ['Rice noodle sheets'], 'urls': ['https://www.google.com/search?sca_esv=579554252&sxsrf=AM9HkKlaWKZFra1JEJmQLagqVwu7lOpvPA:1699161392487&q=rice+paper&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwjyhdy5jayCAxWmADQIHTJBBhUQ0pQJegQIDxAB&biw=1440&bih=758&dpr=2', 'https://balancewithjess.com/hu-tieu-ap-chao/', 'https://www.google.com/search?q=hu+tieu+xao+rice+sheets&tbm=isch&ved=2ahUKEwjExZejjayCAxU_JjQIHf97ACQQ2-cCegQIABAA&oq=hu+tieu+xao+rice+sheets&gs_lcp=CgNpbWcQAzoECCMQJzoFCAAQgAQ6BwgAEIoFEEM6BwgAEBgQgARQvQRYpRdgxRpoAHAAeACAATmIAecEkgECMTOYAQCgAQGqAQtnd3Mtd2l6LWltZ8ABAQ&sclient=img&ei=ASVHZYTBDb_M0PEP__eBoAI&bih=758&biw=1440#imgrc=il_S9C1t9kGChM', 'https://www.foodsofjane.com/recipes/steamed-rice-rolls', 'https://www.google.com/search?client=emacs&sca_esv=579554252&sxsrf=AM9HkKkMHZcCbxpmpXqsj48WrwEW--xssw:1699161240321&q=Rice+noodle+sheets&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiPypTxjKyCAxW_MDQIHVJjDeYQ0pQJegQIDBAB&biw=1440&bih=758&dpr=2#imgrc=Vw7_7S7XaN_v6M', 'https://photos.google.com/photo/AF1QipPM6Ts-zLh2dl10ono15alL7hCGwSCHhbOyav6v', 'https://phohoa.com/', 'https://www.google.com/search?q=pho+hoa+seattle&oq=pho+hoa+seatt&gs_lcrp=EgZjaHJvbWUqCggAEAAY4wIYgAQyCggAEAAY4wIYgAQyEAgBEC4YrwEYxwEYgAQYjgUyBggCEEUYOTIICAMQABgWGB4yCAgEEC4YFhgeMgoIBRAAGIYDGIoFMgYIBhBFGEDSAQg1Mjk1ajBqN6gCALACAA&sourceid=chrome&ie=UTF-8#lpg=cid:CgIgAQ%3D%3D,ik:CAoSLEFGMVFpcE40MXM4TXJDSzlDcFVRZWxBRHZPNUZXb1h5LWtIVFpaeHNnZm03', 'https://timeline.google.com/maps/timeline?pli=1&rapt=AEjHL4MhNWvrl4xjhvtinEYv8V8WTyxNYgSR-reE9VJgys6Ba7GccWm6B2Xi6Xa3uKxuR9rkftCXiinZ4f3LvAJGF9CnnqgrtUIGNdtCmaP1EhTNElp4eko&pb=!1m2!1m1!1s2023-11-04', 'https://www.google.com/search?client=emacs&sca_esv=579833118&sxsrf=AM9HkKmyvTZJVTjaoB4T2Is_emhNvlG1og:1699290431734&q=rice+paper&tbm=isch&source=lnms&sa=X&ved=2ahUKEwimz7aU7q-CAxVkFjQIHXrWCSgQ0pQJegQIDhAB&biw=1440&bih=758&dpr=2', 'https://i0.wp.com/www.wokandkin.com/wp-content/uploads/2021/04/Rice-Paper-saved-for-web-1200-px.png?w=1200&ssl=1'], 'name': 'Rice noodle sheets', 'type': 'Rice noodle sheets'}, {'name': 'Red Chilli Peppers', 'type': 'Chilli Pepper'}, {'name': 'Dark soy sauce', 'type': 'Soy Sauce'}, {'name': 'Oyster Sauce', 'type': 'Oyster Sauce'}, {'name': 'Chicken', 'type': 'Chicken'}, {'name': 'Thai-style Baked Tofu', 'type': 'Tofu'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Cooking Oil', 'type': 'Cooking Oil'}, {'name': 'Palm Sugar', 'type': 'Sugar'}]}
{'r': {'urls': ['https://www.williams-sonoma.com/recipe/farro-salad-with-artichoke-hearts.html?print=true'], 'name': 'Farro Salad with Artichoke Hearts'}, 'products': [{'name': 'Semi-pearled Farro', 'type': 'Farro'}, {'name': 'Oil-packed sun-dried tomatoes', 'type': 'Sundried Tomatoes'}, {'name': 'Fresh flat-leaf parsley', 'type': 'Flat-leaf parsley'}, {'name': 'Pine Nuts', 'type': 'Pine nuts'}, {'name': 'Salt', 'type': 'Salt'}, {'name': 'Extra Virgin Olive Oil', 'type': 'Olive Oil'}, {'name': 'Red Onion', 'type': 'Red Onion'}, {'name': 'Red wine vinegar', 'type': 'Vinegar'}, {'name': 'Black Pepper', 'type': 'Black Pepper'}, {'name': 'Artichoke Hearts', 'type': 'Artichokes'}]}
{'r': {'urls': ['https://www.meghanlivingstone.com/ginger-sesame-dressing/', 'https://www.meghanlivingstone.com/wprm_print/2060'], 'name': 'Ginger Sesame Dressing'}, 'products': [{'name': 'Toasted Sesame Oil', 'type': 'Sesame Oil'}, {'name': 'Maple Syrup', 'type': 'Maple Syrup'}, {'name': 'Ginger Powder', 'type': 'Ginger Powder'}, {'name': 'Apple Cider Vinegar', 'type': 'Apple Cider Vinegar'}, {'name': 'Coconut Aminos', 'type': 'Soy Sauce Alternative'}, {'name': 'Unsweetened Nut Butter', 'type': 'Unsweetened Nut Butter'}]}
{'r': {'urls': ['https://www.ambitiouskitchen.com/wprm_print/24776'], 'name': 'The Easiest Chickpea Greek Salad'}, 'products': [{'name': 'Salt', 'type': 'Salt'}, {'name': 'Black Pepper', 'type': 'Black Pepper'}, {'name': 'Feta Cheese', 'type': 'Cheese'}, {'name': 'Extra Virgin Olive Oil', 'type': 'Olive Oil'}, {'name': 'Lemon Juice', 'type': 'Lemon Juice'}, {'name': 'Grape Tomatoes', 'type': 'Tomatoes'}, {'name': 'Red Onion', 'type': 'Red Onion'}, {'name': 'Kalamata Olives', 'type': 'Olives'}, {'name': 'Yellow Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Red Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Green Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Cucumber', 'type': 'Cucumber'}, {'name': 'Oregano', 'type': 'Oregano'}, {'name': 'Chickpeas', 'type': 'Chickpeas'}]}
{'r': {'urls': ['https://seonkyounglongest.com/korean-sesame-noodles/print/46266/'], 'name': 'Korean Sesame Noodles'}, 'products': [{'name': 'Green Onion', 'type': 'Onion'}, {'name': 'Chili Oil', 'type': 'Chili Oil'}, {'urls': ['https://www.google.com/search?q=tsuyu+soup+seasoning+sauce&oq=tsuyu+soup+seasoning+sauce'], 'search': ['tsuyu soup seasoning sauce'], 'name': 'Tsuyu', 'type': 'Tsuyu'}, {'name': 'Red Chilli Peppers', 'type': 'Chilli Pepper'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}, {'name': 'Sesame Seeds', 'type': 'Sesame Seeds'}, {'name': 'Green Onion', 'type': 'Onion'}, {'name': 'Toasted Sesame Seeds', 'type': 'Sesame Seeds'}, {'name': 'Toasted Seaweed', 'type': 'Seaweed'}, {'name': 'Korean Wild Sesame Oil', 'type': 'Sesame Oil'}]}
{'r': {'urls': ['https://hot-thai-kitchen.com/singaporean-laksa/print/7645/', 'https://hot-thai-kitchen.com/singaporean-laksa/', 'https://www.youtube.com/watch?v=cWtnFKFiB_0'], 'name': 'Laksa'}, 'products': [{'name': 'Galangal', 'type': 'Galangal'}, {'urls': ['https://youtu.be/cWtnFKFiB_0?t=458'], 'name': 'Fish cakes', 'type': 'Seafood'}, {'name': 'Garlic', 'type': 'Garlic'}, {'urls': ['https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883', 'https://www.google.com/search?sca_esv=579651652&sxsrf=AM9HkKlBKUS5rDWtKoKSgxss4PSHC4u0jA:1699211859653&q=bdmp+dried+shrimp&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwiUtKu6ya2CAxVFIjQIHXeICOQQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2#imgrc=_WqiWb3wPqLdYM', 'https://www.youtube.com/watch?v=dBSmCwUXZF0'], 'name': 'Dried Shrimp', 'type': 'Seafood'}, {'name': 'Thai chilies', 'type': 'Pepper'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'urls': ['https://thewoksoflife.com/shrimp-paste-sauce/'], 'name': 'Fermented shrimp paste', 'type': 'Fermented shrimp paste'}, {'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Mung Bean Sprouts', 'type': 'Mung Bean Sprouts'}, {'name': 'Tofu puffs', 'type': 'Tofu'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'urls': ['https://www.google.com/search?client=emacs&sca_esv=580758711&sxsrf=AM9HkKmwGL8OAnRZ8-PJqCLp_VU9-SlJfg:1699507479310&q=Candlenuts&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiwsOPclraCAxVVETQIHabkCi0Q0pQJegQIDRAB&biw=1440&bih=754&dpr=2#imgrc=7uHbBToP7aPjSM'], 'name': 'Candlenuts', 'type': 'Candlenuts'}, {'name': 'Granulated Sugar', 'type': 'Granulated Sugar'}, {'name': 'Turmeric', 'type': 'Turmeric'}, {'name': 'Laksa leaves', 'type': 'Herb'}, {'name': 'Mild dried red chilies', 'type': 'Dry Chilies'}, {'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'Clams', 'type': 'Clams'}, {'name': 'Water', 'type': 'Water'}, {'name': 'Sambal', 'type': 'Condiment'}, {'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Dry rice noodles', 'type': 'Rice Noodles'}]}
{'r': {'urls': ['https://www.youtube.com/watch?v=Ohy1DELF4is', 'https://hot-thai-kitchen.com/pad-see-ew-new/#tasty-recipes-6669-jump-target', 'https://hot-thai-kitchen.com/pad-see-ew-new/print/6669/'], 'name': 'Pad See Ew 2'}, 'products': [{'urls': ['https://www.amazon.com/Kwong-Hung-Seng-Black-Sauce/dp/B081ZC8STN/ref=asc_df_B081ZC8STN/?tag=hyprod-20&linkCode=df0&hvadid=475718186634&hvpos=&hvnetw=g&hvrand=2457386826081397744&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-1187985835872&th=1', 'https://youtu.be/Ohy1DELF4is?t=120'], 'name': 'Kwong Hung Seng Black Soy Sauce', 'details': "Don't get one with blue cap, must be orange cap", 'type': 'Kwong Hung Seng Black Soy Sauce', 'brand': 'Dragon Fly'}, {'urls': ['https://youtu.be/Ohy1DELF4is?t=189', 'https://www.google.com/search?sca_esv=581639650&sxsrf=AM9HkKnNSg_CXeb5rL6VVewE6ryVhODJhg:1699766709342&q=ho+fun+sheet&tbm=isch&source=lnms&sa=X&ved=2ahUKEwi68aS33L2CAxXULzQIHXMzBS4Q0pQJegQICxAB&biw=1440&bih=754&dpr=2#imgrc=eu2r6ySa6xkfhM', 'https://youtu.be/5odVRW9ldzU?t=323'], 'name': 'Wide rice noodles', 'details': 'Ho Fun Sheets', 'type': 'Rice Noodles'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Granulated Sugar', 'type': 'Granulated Sugar'}, {'urls': ['https://www.google.com/search?q=Golden+Mountain+Sauce+near+me&tbm=isch&ved=2ahUKEwiSop3T172CAxWmJjQIHUbyAcwQ2-cCegQIABAA&oq=Golden+Mountain+Sauce+near+me&gs_lcp=CgNpbWcQAzIHCAAQGBCABDoECCMQJzoHCAAQigUQQzoFCAAQgAQ6BggAEAcQHjoGCAAQCBAeOgQIABAeOgYIABAFEB5QqwRY8xBggBRoAHAAeACAAT6IAd4DkgEBOZgBAKABAaoBC2d3cy13aXotaW1nwAEB&sclient=img&ei=sVxQZdKFLqbN0PEPxuSH4Aw&bih=754&biw=1440&client=emacs#imgrc=bhSiLxLZI-38DM', 'https://youtu.be/Ohy1DELF4is?t=112', 'https://youtu.be/Ohy1DELF4is?t=86', 'https://www.google.com/search?client=emacs&sca_esv=581632289&sxsrf=AM9HkKlt749Qe7wh-onttGBzKpSH612ZhQ:1699765017124&q=Golden+Mountain+Sauce&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjGirCQ1r2CAxXfHDQIHXE7B-8Q0pQJegQIDhAB&biw=1440&bih=754&dpr=2'], 'name': 'Golden Mountain Sauce', 'type': 'Golden Mountain Sauce'}, {'name': 'Oyster Sauce', 'type': 'Oyster Sauce'}, {'name': 'Eggs', 'type': 'Eggs'}, {'name': 'Chinese Broccoli', 'type': 'Broccoli'}, {'name': 'Vegetable Oil', 'type': 'Vegetable Oil'}, {'name': 'Thai-style Baked Tofu', 'type': 'Tofu'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'White pepper', 'type': 'White pepper'}, {'name': 'Thai Black Soy Sauce', 'type': 'Thai Black Soy Sauce'}]}
{'r': {'urls': ['https://www.foodandwine.com/pad-see-ew-7559639?print'], 'name': 'Pad See Ew'}, 'products': [{'urls': ['https://youtu.be/Ohy1DELF4is?t=189', 'https://www.google.com/search?sca_esv=581639650&sxsrf=AM9HkKnNSg_CXeb5rL6VVewE6ryVhODJhg:1699766709342&q=ho+fun+sheet&tbm=isch&source=lnms&sa=X&ved=2ahUKEwi68aS33L2CAxXULzQIHXMzBS4Q0pQJegQICxAB&biw=1440&bih=754&dpr=2#imgrc=eu2r6ySa6xkfhM', 'https://youtu.be/5odVRW9ldzU?t=323'], 'name': 'Wide rice noodles', 'details': 'Ho Fun Sheets', 'type': 'Rice Noodles'}, {'name': 'Granulated Sugar', 'type': 'Granulated Sugar'}, {'name': 'Dark soy sauce', 'type': 'Soy Sauce'}, {'name': 'Eggs', 'type': 'Eggs'}, {'name': 'Distilled white vinegar', 'type': 'Vinegar'}, {'name': 'Chinese Broccoli', 'type': 'Broccoli'}, {'name': 'White pepper', 'type': 'White pepper'}, {'name': 'Corn Starch', 'type': 'Corn Starch'}, {'urls': ['https://en.wikipedia.org/wiki/Bird%27s_eye_chili', 'https://www.google.com/search?client=emacs&sca_esv=579702589&sxsrf=AM9HkKlqpOqf2K4ex4TTB1e3ix-WBqYAKQ:1699243036206&q=Thai+bird+chiles&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjHnL3Mva6CAxVaCjQIHdJRCxEQ0pQJegQIDxAB&biw=1440&bih=758&dpr=2#imgrc=u6dinAhHDxTfaM'], 'name': 'Thai bird chiles', 'type': 'Chilies'}, {'name': 'Soy sauce', 'type': 'Soy sauce'}, {'name': 'Oyster Sauce', 'type': 'Oyster Sauce'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Skirt steak', 'type': 'Beef'}, {'name': 'Vegetable Oil', 'type': 'Vegetable Oil'}]}
{'r': {'urls': ['https://www.foodnetwork.com/recipes/pad-thai-7112938?soc=youtube'], 'name': 'Pad Thai'}, 'products': [{'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Dry-Roasted Peanuts', 'type': 'Peanuts'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Granulated Sugar', 'type': 'Granulated Sugar'}, {'urls': ['https://www.amazon.com/8oz-Salted-Turnip-Pack/dp/B01578SHHW'], 'name': 'Salted Turnip', 'type': 'Salted Turnip'}, {'name': 'Lime', 'type': 'Lime'}, {'urls': ['https://www.youtube.com/watch?v=dBSmCwUXZF0'], 'name': 'Garlic Chives', 'type': 'Chives'}, {'name': 'Chicken', 'type': 'Chicken'}, {'name': 'Banana Leaf', 'type': 'Banana Leaf'}, {'name': 'Tamarind Paste', 'type': 'Tamarind Paste'}, {'name': 'Sweet Paprika', 'type': 'Paprika'}, {'name': 'Lime juice', 'type': 'Lime juice'}, {'urls': ['https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883', 'https://www.google.com/search?sca_esv=579651652&sxsrf=AM9HkKlBKUS5rDWtKoKSgxss4PSHC4u0jA:1699211859653&q=bdmp+dried+shrimp&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwiUtKu6ya2CAxVFIjQIHXeICOQQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2#imgrc=_WqiWb3wPqLdYM', 'https://www.youtube.com/watch?v=dBSmCwUXZF0'], 'name': 'Dried Shrimp', 'type': 'Seafood'}, {'urls': ['https://thewoksoflife.com/wp-content/uploads/2020/07/chili-oil-recipe-18.jpg', 'https://www.amazon.com/%E8%80%81%E5%B9%B2%E5%A6%88%E9%A6%99%E8%BE%A3%E8%84%86%E6%B2%B9%E8%BE%A3%E6%A4%92-Spicy-Chili-Crisp-7-41/dp/B07VHKTTR3/ref=asc_df_B07VHKTTR3/?tag=hyprod-20&linkCode=df0&hvadid=642112947349&hvpos=&hvnetw=g&hvrand=12580253979732381700&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-1951193779579&psc=1', 'https://www.google.com/search?sca_esv=580857096&sxsrf=AM9HkKmLh9FDQ0x5jNY12kJCSSbwO6Q3FA:1699539552211&q=thai+and+true+hot+chili&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiJ8KiajreCAxWqAjQIHaMBDKYQ0pQJegQIDBAB&biw=1440&bih=754&dpr=2#imgrc=KDhcVOHe9yNjkM', 'https://photos.google.com/photo/AF1QipMQPtIdU1_m3SkgBWs5RcE2QXFs2OnbbJAdaG9M'], 'name': 'Chili Sauce', 'type': 'Chili Sauce'}, {'name': 'Mung Bean Sprouts', 'type': 'Mung Bean Sprouts'}, {'name': 'Vegetable Oil', 'type': 'Vegetable Oil'}, {'name': 'Eggs', 'type': 'Eggs'}, {'urls': ['https://www.google.com/search?q=Rice%20Sticks'], 'name': 'Rice Sticks', 'type': 'Rice Noodles'}, {'name': 'Rice Wine Vinegar', 'type': 'Rice Wine Vinegar'}, {'name': 'Thai-style Baked Tofu', 'type': 'Tofu'}]}
{'r': {'urls': ['https://www.youtube.com/watch?v=9ANH-tkkBrg'], 'name': 'Pad Thai'}, 'products': [{'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'Lime', 'type': 'Lime'}, {'name': 'Grounded Roasted Peanuts', 'type': 'Peanuts'}, {'urls': ['https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883', 'https://www.google.com/search?sca_esv=579651652&sxsrf=AM9HkKlBKUS5rDWtKoKSgxss4PSHC4u0jA:1699211859653&q=bdmp+dried+shrimp&tbm=isch&source=lnms&sa=X&sqi=2&ved=2ahUKEwiUtKu6ya2CAxVFIjQIHXeICOQQ0pQJegQIDRAB&biw=1440&bih=758&dpr=2#imgrc=_WqiWb3wPqLdYM', 'https://www.youtube.com/watch?v=dBSmCwUXZF0'], 'name': 'Dried Shrimp', 'type': 'Seafood'}, {'name': 'Rice Stick Noodles', 'type': 'Rice Noodles'}, {'urls': ['https://www.youtube.com/watch?v=dBSmCwUXZF0'], 'name': 'Garlic Chives', 'type': 'Chives'}, {'name': 'Palm Sugar', 'type': 'Sugar'}, {'urls': ['https://photos.google.com/photo/AF1QipMTNoAmEBIUBgJiziw2Tl16y2KscVqpjfDGlS-q', 'https://photos.google.com/photo/AF1QipPd47xo0JnbBdfR9pbd6FgvPRvxghQoP_wmWxph'], 'name': 'Tamarind Liquid', 'type': 'Tamarind Liquid'}, {'name': 'Pressed Tofu', 'type': 'Tofu'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'urls': ['https://www.google.com/search?q=Sweetened+Radish&tbm=isch&chips=q:sweet+radish,g_1:pad+thai:jagT0YaAv9M%3D&client=emacs&hl=en&sa=X&ved=2ahUKEwj-mLvS56-CAxWKFjQIHTmHCrEQ4lYoAHoECAEQNQ&biw=1440&bih=758#imgrc=8T2ZeEeH0IL-QM'], 'name': 'Sweetened Radish', 'type': 'Sweetened Radish'}, {'name': 'Mung Bean Sprouts', 'type': 'Mung Bean Sprouts'}, {'name': 'Eggs', 'type': 'Eggs'}, {'name': 'Roasted Chili Flakes', 'type': 'Chili Flakes'}]}
{'r': {'urls': ['https://www.evolvingtable.com/peanut-sauce/'], 'name': 'Peanut Sauce'}, 'products': [{'name': 'Rice vinegar', 'type': 'Vinegar'}, {'name': 'Sriracha', 'type': 'Sriracha'}, {'name': 'Water', 'type': 'Water'}, {'name': 'Adams Peanut Butter', 'type': 'Peanut Butter'}, {'name': 'Soy sauce', 'type': 'Soy sauce'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Brown Sugar', 'type': 'Sugar'}]}
{'r': {'urls': ['https://www.hwcmagazine.com/wprm_print/13492', 'https://youtu.be/Ohy1DELF4is?t=482', 'https://www.google.com/search?sca_esv=581639650&sxsrf=AM9HkKkIVmtaHAvtXzMyyTNYWk6-7CtF8g:1699767680259&q=white+vinegar+thai+chilis&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjd-qCG4L2CAxWaLzQIHUzuAtoQ0pQJegQICBAB&biw=1440&bih=754&dpr=2#imgrc=m_93K5cwN3hNnM', 'https://www.hwcmagazine.com/recipe/prik-nam-pla/'], 'name': 'Prik Nam Pla'}, 'products': [{'name': 'Lime juice', 'type': 'Lime juice'}, {'urls': ['https://www.youtube.com/watch?v=dBSmCwUXZF0'], 'name': 'Garlic Chives', 'type': 'Chives'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Brown Sugar', 'type': 'Sugar'}, {'name': 'Cilantro', 'type': 'Cilantro'}, {'urls': ['https://en.wikipedia.org/wiki/Bird%27s_eye_chili', 'https://www.google.com/search?client=emacs&sca_esv=579702589&sxsrf=AM9HkKlqpOqf2K4ex4TTB1e3ix-WBqYAKQ:1699243036206&q=Thai+bird+chiles&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjHnL3Mva6CAxVaCjQIHdJRCxEQ0pQJegQIDxAB&biw=1440&bih=758&dpr=2#imgrc=u6dinAhHDxTfaM'], 'name': 'Thai bird chiles', 'type': 'Chilies'}]}
{'r': {'urls': ['https://hot-thai-kitchen.com/red-curry-paste/print/6752/'], 'name': 'Vegan Thai Red Curry'}, 'products': [{'name': 'Cumin seeds', 'type': 'Cumin '}, {'urls': ['https://www.google.com/search?client=emacs&sca_esv=579520937&sxsrf=AM9HkKlUrnbTZeiuHkGuxjA6wsla9_IkfQ:1699140927441&q=Makrut+Lime&tbm=isch&source=lnms&sa=X&ved=2ahUKEwir5pybwauCAxXfLTQIHYj1DqQQ0pQJegQICxAB&biw=1440&bih=758&dpr=2'], 'name': 'Makrut lime zest', 'type': 'Makrut Lime'}, {'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Coriander seeds', 'type': 'Spice'}, {'name': 'Spicy dried red chilies', 'type': 'Dry Chilies'}, {'name': 'Cilantro roots', 'type': 'Cilantro'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Mild dried red chilies', 'type': 'Dry Chilies'}, {'name': 'Galangal', 'type': 'Galangal'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'name': 'White Peppercorns', 'type': 'White Peppercorns'}, {'name': 'Shrimp Paste', 'type': 'Shrimp Paste'}]}
{'r': {'urls': ['https://www.seriouseats.com/the-best-roast-potatoes-ever-recipe'], 'name': 'The Best Crispy Roast Potatoes Ever'}, 'products': [{'name': 'Parsley', 'type': 'Parsley'}, {'name': 'Rosemary', 'type': 'Rosemary'}, {'name': 'Baking soda', 'type': 'Baking Soda'}, {'name': 'Extra Virgin Olive Oil', 'type': 'Olive Oil'}, {'name': 'Russet Potatoes', 'type': 'Russet Potatoe'}, {'name': 'Garlic', 'type': 'Garlic'}]}
{'r': {'urls': ['https://www.loveandlemons.com/roasted-broccoli/'], 'name': 'Roasted Broccoli'}, 'products': [{'name': 'Extra Virgin Olive Oil', 'type': 'Olive Oil'}, {'name': 'Morton Salt Kosher Coarse', 'type': 'Kosher Salt'}, {'name': 'Black Pepper', 'type': 'Black Pepper'}, {'name': 'Broccoli', 'type': 'Broccoli'}, {'name': 'Spicy Red Pepper Flakes', 'type': 'Spicy Red Pepper Flakes'}]}
{'r': {'urls': ['https://www.simplyrecipes.com/recipes/tomatillo_salsa_verde/?print'], 'name': 'Tomatillo Salsa Verde'}, 'products': [{'name': 'Tomatillos', 'type': 'Tomatillos'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Lime juice', 'type': 'Lime juice'}, {'name': 'Cilantro', 'type': 'Cilantro'}, {'name': 'Salt', 'type': 'Salt'}, {'name': 'White Onion', 'type': 'Onion'}, {'name': 'Jalapeno Pepper', 'type': 'Pepper'}]}
{'r': {'urls': ['https://cookieandkate.com/sugar-snap-pea-and-carrot-soba-noodles/print/23556/'], 'name': 'Sugar Snap Pea and Carrot Soba Noodles'}, 'products': [{'name': 'Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}, {'name': 'Sweet White Miso', 'type': 'Miso'}, {'name': 'Tamari', 'type': 'Tamari'}, {'name': 'Peanut Oil', 'type': 'Oil'}, {'name': 'Sriracha', 'type': 'Sriracha'}, {'name': 'Honey', 'type': 'Honey'}, {'name': 'Carrots', 'type': 'Carrots'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}, {'name': 'Lime', 'type': 'Lime'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}, {'name': 'Toasted Sesame Oil', 'type': 'Sesame Oil'}, {'name': 'Tamari', 'type': 'Tamari'}, {'name': 'Edamame', 'type': 'Edamame'}, {'name': 'Cilantro', 'type': 'Cilantro'}, {'name': 'Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Sesame Seeds', 'type': 'Sesame Seeds'}, {'name': 'Tamari', 'type': 'Tamari'}, {'name': 'Edamame', 'type': 'Edamame'}, {'name': 'Sugar Snap Peas', 'type': 'Sugar Snap Peas'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Sesame Seeds', 'type': 'Sesame Seeds'}, {'name': 'Cilantro', 'type': 'Cilantro'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}, {'name': 'Lime', 'type': 'Lime'}, {'name': 'Sugar Snap Peas', 'type': 'Sugar Snap Peas'}, {'name': 'Tamari', 'type': 'Tamari'}]}
{'r': {'urls': ['https://youtu.be/HJPRPEJY2WM?t=265', 'https://natashaskitchen.com/fresh-spring-rolls/', 'https://natashaskitchen.com/wprm_print/72895', 'https://www.youtube.com/shorts/lECNJqSXk64'], 'name': 'Fresh Spring Rolls'}, 'products': [{'name': 'Romaine Lettuce', 'type': 'Romaine'}, {'name': 'Dry rice noodles', 'type': 'Rice Noodles'}, {'name': 'Carrots', 'type': 'Carrots'}, {'name': 'Toasted Sesame Oil', 'type': 'Sesame Oil'}, {'name': 'Rice Wine Vinegar', 'type': 'Rice Wine Vinegar'}, {'urls': ['https://www.google.com/search?client=emacs&sca_esv=581269367&sxsrf=AM9HkKkz3fh-g6VKFw7SQLjSbKO7bO0n2g:1699640340645&q=Chili+Garlic+Sauce&tbm=isch&source=lnms&sa=X&ved=2ahUKEwjB3P_VhbqCAxW9FjQIHQ6rDewQ0pQJegQIDRAB&biw=1440&bih=754&dpr=2'], 'name': 'Huy Fong Chili Garlic Sauce', 'type': 'Chili Garlic Sauce'}, {'name': 'Lime juice', 'type': 'Lime juice'}, {'name': 'Round Rice Paper Sheets', 'type': 'Round Rice Paper Sheets'}, {'name': 'Granulated Sugar', 'type': 'Granulated Sugar'}, {'name': 'Three Crabs Fish Sauce', 'type': 'Three Crabs Fish Sauce'}, {'name': 'Water', 'type': 'Water'}, {'name': 'Cucumber', 'type': 'Cucumber'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Shredded Carrot', 'type': 'Shredded Carrot'}, {'name': 'Frozen Shrimp', 'type': 'Shrimp'}, {'name': 'Cilantro', 'type': 'Cilantro'}]}
{'r': {'urls': ['https://www.youtube.com/watch?v=t-Hj2pILMz4', 'https://prohomecooks.com/blogs/all/why-every-cook-should-master-chicken-teriyaki?_pos=1&_sid=7db443900&_ss=r'], 'name': 'Chicken Teriyaki Recipe'}, 'products': [{'name': 'Cooking Oil', 'type': 'Cooking Oil'}, {'name': 'Thai-style Baked Tofu', 'type': 'Tofu'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Rice', 'type': 'Rice'}, {'name': 'Corn Starch', 'type': 'Corn Starch'}, {'name': 'Water', 'type': 'Water'}, {'name': 'Water', 'type': 'Water'}, {'name': 'Chicken Thighs', 'type': 'Chicken'}, {'name': 'Red Onion', 'type': 'Red Onion'}, {'name': 'Broccolini', 'type': 'Broccolini'}, {'name': 'Sesame Seeds', 'type': 'Sesame Seeds'}, {'name': 'Rice Wine Vinegar - Kikkoman Mirin', 'type': 'Vinegar'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Red Pepper', 'type': 'Bell Pepper'}, {'name': 'Sake Wine', 'type': 'Sake Wine'}, {'name': 'Soy sauce', 'type': 'Soy sauce'}]}
{'r': {'urls': ['https://www.joshuaweissman.com/post/easy-authentic-thai-green-curry', 'https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883'], 'name': 'The Best Green Curry'}, 'products': [{'name': 'Garlic cloves', 'type': 'Garlic'}, {'urls': ['https://www.fredmeyer.com/p/simple-truth-organic-thai-basil/0001111001922'], 'name': 'Thai basil', 'type': 'Herb'}, {'name': 'White Peppercorns', 'type': 'White Peppercorns'}, {'urls': ['https://www.wholefoodsmarket.com/product/kaffir-lime%20leaves-b07q8ldbvj', 'https://www.youtube.com/watch?v=4Qz5nC-DcKk', 'https://www.safeway.com/shop/marketplace/product-details.970537048.html', 'https://photos.google.com/photo/AF1QipPI_6_YxYIuCSAvP93sDoRcyFDjekCQjNSb3Ln0', 'https://photos.google.com/photo/AF1QipPd_yNuI9VcQAFOwMSuvBx40o_sl4gAmCgBYNIQ', 'https://www.youtube.com/watch?v=SB3AV7oHKiE'], 'name': 'Kaffir lime leaves', 'type': 'Kaffir Lime Leaves'}, {'name': 'Galangal', 'type': 'Galangal'}, {'name': 'Thai Eggplant', 'type': 'Thai Eggplant'}, {'name': 'Chicken Thighs', 'type': 'Chicken'}, {'name': 'Fried shallots', 'type': 'Condiment'}, {'name': 'Serranos', 'type': 'Serrano Peppers'}, {'name': 'Lime', 'type': 'Lime'}, {'urls': ['https://www.google.com/search?sca_esv=579007228&sxsrf=AM9HkKkqQcpTokvs8EUmjT-DnZNXV9I6Lw:1698970375605&q=kaffir+lime&tbm=isch&source=lnms&sa=X&ved=2ahUKEwiH6eLtxaaCAxVnMDQIHZ94DUYQ0pQJegQIDhAB&biw=1440&bih=758&dpr=2'], 'name': 'Kaffir Lime', 'type': 'Kaffir Lime'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Cilantro', 'type': 'Cilantro'}, {'name': 'Palm Sugar', 'type': 'Sugar'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'search': ['shrimp paste kapi OR gabi OR gkabi'], 'urls': ['https://www.eatingthaifood.com/thai-nam-prik-kapi-recipe/'], 'comments': ['thaiShrimpPasteComment1', 'thaiShrimpPasteComment2'], 'name': 'Thai shrimp paste', 'type': 'Thai shrimp paste'}, {'name': 'Cumin seeds', 'type': 'Cumin '}, {'name': 'Coriander seeds', 'type': 'Spice'}, {'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Chicken stock', 'type': 'Stock'}, {'name': 'Snow peas', 'type': 'Snow Peas'}]}
{'r': {'urls': ['https://www.myfoodchannel.com/thai-eggplant-recipe/', 'https://www.youtube.com/watch?v=7a0IAC7pCgA'], 'name': 'Thai Eggplant Recipe'}, 'products': [{'name': 'Coriander powder', 'type': 'Spice'}, {'name': 'Red Bell Pepper', 'type': 'Bell Pepper'}, {'name': 'Lime juice', 'type': 'Lime juice'}, {'name': 'Salt', 'type': 'Salt'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'urls': ['https://www.fredmeyer.com/p/simple-truth-organic-thai-basil/0001111001922'], 'name': 'Thai basil', 'type': 'Herb'}, {'name': 'Onion', 'type': 'Onion'}, {'name': 'Garlic cloves', 'type': 'Garlic'}, {'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Chili powder', 'type': 'Spice'}, {'name': 'Coconut Oil', 'type': 'Coconut Oil'}, {'name': 'Chicken stock', 'type': 'Stock'}, {'name': 'Thai Eggplant', 'type': 'Thai Eggplant'}, {'name': 'Thai chilies', 'type': 'Pepper'}, {'name': 'Turmeric', 'type': 'Turmeric'}]}
{'r': {'urls': ['https://hot-thai-kitchen.com/creamy-tom-yum/print/6203/', 'https://hot-thai-kitchen.com/creamy-tom-yum/', 'https://www.youtube.com/watch?v=hhcYNjeQ_XY&list=PLaS2Ffd8cyD7SL49uWtqbfuUBmLi9nVup'], 'name': 'Tom Yum Goong'}, 'products': [{'name': 'Lemongrass', 'type': 'Lemongrass'}, {'name': 'Lime juice', 'type': 'Lime juice'}, {'urls': ['https://photos.google.com/photo/AF1QipM0ragYoS8EjrRngQukQJH_U1hnen_ACdJyMqEV'], 'name': 'Jasmine Rice', 'type': 'Jasmine Rice'}, {'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'urls': ['https://www.wholefoodsmarket.com/product/kaffir-lime%20leaves-b07q8ldbvj', 'https://www.youtube.com/watch?v=4Qz5nC-DcKk', 'https://www.safeway.com/shop/marketplace/product-details.970537048.html', 'https://photos.google.com/photo/AF1QipPI_6_YxYIuCSAvP93sDoRcyFDjekCQjNSb3Ln0', 'https://photos.google.com/photo/AF1QipPd_yNuI9VcQAFOwMSuvBx40o_sl4gAmCgBYNIQ', 'https://www.youtube.com/watch?v=SB3AV7oHKiE'], 'name': 'Kaffir lime leaves', 'type': 'Kaffir Lime Leaves'}, {'urls': ['https://www.youtube.com/watch?v=hhcYNjeQ_XY&list=PLaS2Ffd8cyD7SL49uWtqbfuUBmLi9nVup'], 'name': 'Sawtooth Coriander', 'type': 'Sawtooth Coriander'}, {'urls': ['https://youtu.be/hhcYNjeQ_XY?list=PLaS2Ffd8cyD7SL49uWtqbfuUBmLi9nVup&t=406', 'https://www.qfc.com/p/ka-me-whole-peeled-straw-mushrooms/0007084400742'], 'name': 'Ka-Me Whole Peeled Straw Mushrooms', 'type': 'Straw Mushrooms'}, {'urls': ['https://youtu.be/hhcYNjeQ_XY?list=PLaS2Ffd8cyD7SL49uWtqbfuUBmLi9nVup&t=433', 'https://photos.google.com/photo/AF1QipNWHU8huzjTXkKBm0l9ehnPAJFm5J_jea8kU5KL'], 'name': 'Mae Ploy Thai Chili Paste in Oil', 'type': 'Thai Chili Paste'}, {'name': 'Galangal', 'type': 'Galangal'}, {'name': 'Evaporated Milk', 'type': 'Evaporated Milk'}, {'name': 'Thai chilies', 'type': 'Pepper'}, {'name': 'Water', 'type': 'Water'}, {'name': 'Oyster Mushrooms', 'type': 'Oyster Mushroom'}]}
{'r': {'urls': ['https://christieathome.com/wprm_print/3534'], 'name': 'Vietnamese Spring Rolls (Gá»i Cuá»n)'}, 'products': [{'name': 'Dry-Roasted Peanuts', 'type': 'Peanuts'}, {'name': 'Rice paper', 'type': 'Rice Paper'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Adams Peanut Butter', 'type': 'Peanut Butter'}, {'name': 'Romaine Lettuce', 'type': 'Romaine'}, {'name': 'Lee Kum Kee Sauce Hoisin', 'type': 'Lee Kum Kee Sauce Hoisin'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Shrimp', 'type': 'Shrimp'}, {'name': 'Water', 'type': 'Water'}, {'urls': ['https://photos.google.com/photo/AF1QipPPETrmRSh8-h9guEbb90DRig4g_njAUvQ50Ol6', 'https://photos.google.com/photo/AF1QipMYLPcT9Oybki3TQGztAT1X5tIxpknKSJ0ZmdlP', 'https://www.amazon.com/Fresh-Stick-Vermicelli-SIMPLY-FOOD/dp/B08NXVTFTP/ref=asc_df_B08NXVTFTP/?tag=hyprod-20&linkCode=df0&hvadid=652498065761&hvpos=&hvnetw=g&hvrand=10598234170837115346&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-2065471401768&psc=1', 'https://www.amazon.com/Fresh-Stick-Vermicelli-SIMPLY-FOOD/dp/B08NXVTFTP/ref=asc_df_B08NXVTFTP/?tag=hyprod-20&linkCode=df0&hvadid=652498065761&hvpos=&hvnetw=g&hvrand=10598234170837115346&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9061293&hvtargid=pla-2065471401768&psc=1'], 'name': 'Rice vermicelli', 'type': 'Rice vermicelli'}, {'name': 'Shallots', 'type': 'Shallots'}, {'urls': ['https://photos.google.com/photo/AF1QipNrbFzt7g3nCOVFOmFa6geW-HODg2hilRdq4xl0'], 'notes': ['added to frezer Nov 6 2023'], 'name': 'Mint leaves', 'type': 'Mint'}, {'name': 'Vegetable Oil', 'type': 'Vegetable Oil'}]}
{'r': {'urls': ['https://lifemadesimplebakes.com/wprm_print/25731'], 'name': 'Yellow Coconut Curry Chicken'}, 'products': [{'urls': ['https://www.google.com/search?q=Yellow+Curry+Powder+near+me&tbm=isch&ved=2ahUKEwiVxLm7h6mCAxWIFjQIHTNwBKoQ2-cCegQIABAA&oq=Yellow+Curry+Powder+near+me&gs_lcp=CgNpbWcQAzIHCAAQGBCABDoECCMQJzoGCAAQBxAeOgYIABAIEB46BAgAEB46BggAEAUQHlDIBViIEGD3EWgAcAB4AIABS4gBkQSSAQE5mAEAoAEBqgELZ3dzLXdpei1pbWfAAQE&sclient=img&ei=QoxFZZWbEYit0PEPs-CR0Ao&bih=758&biw=1440&client=emacs'], 'name': 'Yellow Curry Powder', 'type': 'Spice'}, {'name': 'Carrots', 'type': 'Carrots'}, {'urls': ['https://www.wholefoodsmarket.com/product/maesri-red-curry-paste-b0013esw84', 'https://www.safeway.com/shop/product-details.970519982.html?cmpid=ps_swy_sea_ecom_goo_20200924_71700000073186042_58700007112018081_92700063963421736&r=https%3A%2F%2Fwww.google.com%2F'], 'name': 'Maesri Thai Red Curry Paste', 'type': 'Curry Paste'}, {'name': 'Russet Potatoes', 'type': 'Russet Potatoe'}, {'name': 'Garlic', 'type': 'Garlic'}, {'name': 'Yellow Onion', 'type': 'Onion'}, {'name': 'Chicken Breast', 'type': 'Chicken'}, {'name': 'Brown Sugar', 'type': 'Sugar'}, {'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Rice', 'type': 'Rice'}, {'name': 'Coconut Oil', 'type': 'Coconut Oil'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Chicken Broth', 'type': 'Broth'}, {'name': 'Cilantro', 'type': 'Cilantro'}]}
{'r': {'urls': ['https://www.templeofthai.com/recipes/yellow_chicken_curry.php'], 'name': 'Yellow Curry with Chicken'}, 'products': [{'name': 'Curry Powder', 'type': 'Curry Powder'}, {'name': 'Chicken', 'type': 'Chicken'}, {'name': 'Shrimp Paste', 'type': 'Shrimp Paste'}, {'name': 'Shallots', 'type': 'Shallots'}, {'name': 'Fried shallots', 'type': 'Condiment'}, {'name': 'Cumin seeds', 'type': 'Cumin '}, {'name': 'Potatoes', 'type': 'Potatoe'}, {'name': 'Full fat coconut milk', 'type': 'Coconut Milk'}, {'name': 'Ginger', 'type': 'Ginger'}, {'name': 'Sea Salt', 'type': 'Sea Salt'}, {'name': 'Lemongrass', 'type': 'Lemongrass'}, {'name': 'Fish sauce', 'type': 'Fish Sauce'}, {'name': 'Coriander seeds', 'type': 'Spice'}, {'name': 'Dried Thai Chilis', 'type': 'Thai Chilies'}, {'name': 'Garlic', 'type': 'Garlic'}, {'urls': ['https://www.safeway.com/shop/product-details.960076294.html', 'https://www.safeway.com/shop/product-details.960076294.html', 'https://youtu.be/GC7ccNKatVU?t=696'], 'name': 'Yellow Curry Paste', 'type': 'Curry Paste', 'brand': 'Mae Ploy'}, {'name': 'Galangal', 'type': 'Galangal'}]}
{'r': {'urls': ['https://drivemehungry.com/wprm_print/13748'], 'name': '7-Minute Zaru Soba (Cold Soba Noodles)'}, 'products': [{'name': 'SWEET preserved daikon radish', 'type': 'Radish'}, {'urls': ['https://www.google.com/search?client=emacs&sca_esv=577922779&sxsrf=AM9HkKkUxzT-KjHg9ziVgvqz5Zsqmn7xdw:1698703946500&q=Japanese+nori&tbm=isch&source=lnms&sa=X&ved=2ahUKEwi647yq5Z6CAxVxMjQIHRW8BBYQ0pQJegQIChAB&biw=1440&bih=758&dpr=2'], 'name': 'Japanese Nori', 'type': 'Nori'}, {'name': 'Ice-cold water', 'type': 'Water'}, {'name': 'Sesame Seeds', 'type': 'Sesame Seeds'}, {'urls': ['https://www.amazon.com/Kikkoman-Japanese-Noodle-Soup-Tsuyu/dp/B002Z3F0IW', 'https://www.google.com/search?q=kikkoman+japanese+noodle+soup+base(hon+tsuyu)&oq=Kikkoman+Japanese+Noodle+Soup+Base(Hon+Tsuyu)&gs_lcrp=EgZjaHJvbWUqBwgAEAAYgAQyBwgAEAAYgAQyBwgBEAAYgAQyCggCEAAYhgMYigUyCggDEAAYhgMYigUyBggEEEUYPDIGCAUQRRg9MgYIBhBFGD3SAQc0NzBqMGo0qAIAsAIA&sourceid=chrome&ie=UTF-8', 'https://www.youtube.com/watch?v=61nPpDkz1AI'], 'name': 'Kikkoman Japanese Noodle Soup Base (Hon Tsuyu)', 'type': 'Tsuyu', 'brand': 'Kikkoman'}, {'name': 'Scallions or Chives', 'type': 'Scalions'}, {'name': 'Wasabi', 'type': 'Wasabi'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}]}
{'r': {'urls': ['https://www.cookerru.com/wprm_print/7756'], 'name': '10-Minute Zaru Soba (Cold Soba Noodles)'}, 'products': [{'name': 'Green Onion', 'type': 'Onion'}, {'name': 'Soy sauce', 'type': 'Soy sauce'}, {'name': 'Soba Noodles', 'type': 'Soba Noodles'}, {'name': 'SWEET preserved daikon radish', 'type': 'Radish'}, {'name': 'Mirin', 'type': 'Mirin'}, {'name': 'Egg yolk', 'type': 'Egg yolk'}, {'name': 'Toasted sesame flakes', 'type': 'Garnish'}, {'name': 'Toasted Seaweed', 'type': 'Seaweed'}, {'name': 'Wasabi', 'type': 'Wasabi'}, {'name': 'Granulated Sugar', 'type': 'Granulated Sugar'}]}
#+end_example

* locate products with vegetable types


#+begin_example
MATCH (p:Product)
WHERE toLower(p.type) CONTAINS 'vegetable'
RETURN p.name AS ProductName, p.type AS Type;
#+end_example

Results:
#+begin_example
{'ProductName': 'Vegetable Oil', 'Type': 'Vegetable Oil'}
#+end_example

* locate products with pea-related types


#+begin_example
MATCH (p:Product)
WHERE toLower(p.type) CONTAINS 'peas'
RETURN p.name AS ProductName, p.type AS Type;
#+end_example

Results:
#+begin_example
{'ProductName': 'Chickpeas', 'Type': 'Chickpeas'}
{'ProductName': 'Frozen Peas', 'Type': 'Peas'}
{'ProductName': 'Snow peas', 'Type': 'Snow Peas'}
{'ProductName': 'Sugar Snap Peas', 'Type': 'Sugar Snap Peas'}
#+end_example

* what recipes call for chicken stock?

I made a recipe that calls for chicken stock but I could only buy
1 qt, but recipe didn't call for 1qt. What other recipe can I make
with the leftovers?

#+begin_example
MATCH (recipe:Recipe)-[:CONTAINS]->(ingredient:Product)
WHERE
  toLower(ingredient.name) CONTAINS 'chicken stock'
RETURN recipe, ingredient
ORDER BY toLower(recipe.name);
#+end_example

Results:
#+begin_example
{'recipe': {'urls': ['https://theflavoursofkitchen.com/wprm_print/104534'], 'name': 'Chicken Thai Red Curry'}, 'ingredient': {'name': 'Chicken Stock or Water', 'type': 'Chicken Stock'}}
{'recipe': {'urls': ['https://www.myfoodchannel.com/thai-eggplant-recipe/', 'https://www.youtube.com/watch?v=7a0IAC7pCgA'], 'name': 'Thai Eggplant Recipe'}, 'ingredient': {'name': 'Chicken stock', 'type': 'Stock'}}
{'recipe': {'urls': ['https://www.joshuaweissman.com/post/easy-authentic-thai-green-curry', 'https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883'], 'name': 'The Best Green Curry'}, 'ingredient': {'name': 'Chicken stock', 'type': 'Stock'}}
#+end_example

* recipes that call for chicken stock

Loop over all recipes that call for chicken stock and show their
ingredients.

#+begin_example
MATCH (recipe:Recipe)-[:CONTAINS]->(ingredient:Product)
WHERE toLower(ingredient.name) CONTAINS 'chicken stock'
WITH recipe
MATCH (recipe)-[:CONTAINS]->(allIngredients:Product)
RETURN recipe.name AS Recipe, recipe.urls AS RecipeURLs, COLLECT(DISTINCT allIngredients.name) AS AllIngredients
ORDER BY toLower(recipe.name);
#+end_example

Results:
#+begin_example
{'Recipe': 'Chicken Thai Red Curry', 'RecipeURLs': ['https://theflavoursofkitchen.com/wprm_print/104534'], 'AllIngredients': ['Full fat coconut milk', 'Light Brown Sugar', 'Cooking Oil', 'Onion', 'Ginger', 'Red Bell Pepper', 'Garlic', 'Thai basil', 'Boneless Chicken Thighs', 'Fish sauce', 'Chicken Stock or Water', 'Lemongrass', 'Zucchini', 'Red Curry Paste', 'Lemon Juice']}
{'Recipe': 'Thai Eggplant Recipe', 'RecipeURLs': ['https://www.myfoodchannel.com/thai-eggplant-recipe/', 'https://www.youtube.com/watch?v=7a0IAC7pCgA'], 'AllIngredients': ['Coriander powder', 'Red Bell Pepper', 'Lime juice', 'Salt', 'Ginger', 'Lemongrass', 'Thai basil', 'Onion', 'Garlic cloves', 'Full fat coconut milk', 'Chili powder', 'Coconut Oil', 'Chicken stock', 'Thai Eggplant', 'Thai chilies', 'Turmeric']}
{'Recipe': 'The Best Green Curry', 'RecipeURLs': ['https://www.joshuaweissman.com/post/easy-authentic-thai-green-curry', 'https://photos.google.com/photo/AF1QipMJV_m1w-qezTjSZAmu6Vam_PKMR6GICW6TJ883'], 'AllIngredients': ['Garlic cloves', 'Thai basil', 'White Peppercorns', 'Kaffir lime leaves', 'Galangal', 'Thai Eggplant', 'Chicken Thighs', 'Fried shallots', 'Serranos', 'Lime', 'Kaffir Lime', 'Lemongrass', 'Shallots', 'Cilantro', 'Palm Sugar', 'Fish sauce', 'Thai shrimp paste', 'Cumin seeds', 'Coriander seeds', 'Full fat coconut milk', 'Chicken stock', 'Snow peas']}
#+end_example

* find recipes that contain either carrots or beans


#+begin_example
MATCH (recipe:Recipe)-[:CONTAINS]->(ingredient:Product)
WHERE
  toLower(ingredient.name) CONTAINS 'carrots' OR
  toLower(ingredient.name) CONTAINS 'beans'
RETURN recipe, ingredient
ORDER BY toLower(recipe.name);
#+end_example

Results:
#+begin_example
{'recipe': {'urls': ['https://www.food.com/recipe/easy-black-bean-soup-59796?ftab=reviews#activity-feed'], 'name': 'Easy Black Bean Soup'}, 'ingredient': {'name': 'Black Beans', 'type': 'Black Beans'}}
{'recipe': {'urls': ['https://youtu.be/HJPRPEJY2WM?t=265', 'https://natashaskitchen.com/fresh-spring-rolls/', 'https://natashaskitchen.com/wprm_print/72895', 'https://www.youtube.com/shorts/lECNJqSXk64'], 'name': 'Fresh Spring Rolls'}, 'ingredient': {'name': 'Carrots', 'type': 'Carrots'}}
{'recipe': {'urls': ['https://cookieandkate.com/sugar-snap-pea-and-carrot-soba-noodles/print/23556/'], 'name': 'Sugar Snap Pea and Carrot Soba Noodles'}, 'ingredient': {'name': 'Carrots', 'type': 'Carrots'}}
{'recipe': {'urls': ['https://lifemadesimplebakes.com/wprm_print/25731'], 'name': 'Yellow Coconut Curry Chicken'}, 'ingredient': {'name': 'Carrots', 'type': 'Carrots'}}
#+end_example

* detecting unknown products in a recipe

Black Beans has cumin, but we don't have cumin listed in the
database...for example.

#+begin_example
MATCH (recipe)-[:CONTAINS]->(product)
WHERE product.name IS NULL
RETURN recipe.name;
#+end_example

Results:
#+begin_example
#+end_example
We're hoping for empty result list. If the result set is empty,
then I've already cleaned up the data.

* recipe with unknown products


#+begin_example
MATCH (recipe)-[r:CONTAINS]->(product)
WHERE product.name IS NULL
RETURN DISTINCT recipe.name, r.quantity;
#+end_example

Results:
#+begin_example
#+end_example
We're hoping for empty result list. If the result set is empty,
then I've already cleaned up the data.

* cleanup data, find recipes with unknown products

This is data cleanup task.

Find all recipes that have products whose product names are empty
or that the product by mistake doesn't yet exist. Its an error in
the data.

Once you've found the recipes, then list all the products
associated with this recipe.  We will need to compare that list.

#+begin_example
MATCH (recipe)-[:CONTAINS]->(product)
WHERE product.name IS NULL
WITH recipe
MATCH (recipe)-[:CONTAINS]->(allProducts)
RETURN recipe.name, allProducts.name;
#+end_example

Results:
#+begin_example
#+end_example
We're hoping for empty result list. If the result set is empty,
then I've already cleaned up the data.

* fix data for a single recipe


#+begin_example
MATCH (recipe)-[:CONTAINS]->(product)
WHERE product.name IS NULL AND recipe.name = 'Chicken Thai Red Curry'
WITH recipe
MATCH (recipe)-[:CONTAINS]->(allProducts)
RETURN recipe, allProducts;
#+end_example

Results:
#+begin_example
#+end_example
We're hoping for empty result list. If the result set is empty,
then I've already cleaned up the data.

* find stores for recipe ingredients: explore purchases

If I were to make Crispy Baked Tofu, Roasted Broccoli and Fresh
Spring Rolls, then where would I need to go to get the
ingredients?

#+begin_example
MATCH (store:Store)-[:PURCHASE_AT]-(purchasedProduct:Product)-[:CONTAINS]-(recipe:Recipe)
WHERE recipe.name IN ['Crispy Baked Tofu', 'Roasted Broccoli', 'Fresh Spring Rolls']
WITH DISTINCT recipe.name AS Recipe, store.name AS Store, purchasedProduct.name AS Product
RETURN Recipe, Store, Product
ORDER BY toLower(Store);
#+end_example

Results:
#+begin_example
{'Recipe': 'Fresh Spring Rolls', 'Store': 'dummy place holder', 'Product': 'Water'}
{'Recipe': 'Roasted Broccoli', 'Store': 'Grocery Outlet', 'Product': 'Extra Virgin Olive Oil'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Grocery Outlet', 'Product': 'Frozen Shrimp'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'M2M Mart', 'Product': 'Dry rice noodles'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'M2M Mart', 'Product': 'Toasted Sesame Oil'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'M2M Mart', 'Product': 'Huy Fong Chili Garlic Sauce'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'M2M Mart', 'Product': 'Round Rice Paper Sheets'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'M2M Mart', 'Product': 'Three Crabs Fish Sauce'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Madison Co-op', 'Product': 'Black Pepper'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Madison Co-op', 'Product': 'Garlic Powder'}
{'Recipe': 'Roasted Broccoli', 'Store': 'Madison Co-op', 'Product': 'Black Pepper'}
{'Recipe': 'Roasted Broccoli', 'Store': 'Madison Co-op', 'Product': 'Spicy Red Pepper Flakes'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'PCC', 'Product': 'Tamari'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'PCC', 'Product': 'Avocado Oil'}
{'Recipe': 'Roasted Broccoli', 'Store': 'PCC', 'Product': 'Extra Virgin Olive Oil'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'QFC', 'Product': 'Huy Fong Chili Garlic Sauce'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Safeway', 'Product': 'Tamari'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Safeway', 'Product': 'Extra Firm Tofu'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Safeway', 'Product': 'Corn Starch'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Safeway', 'Product': 'Morton Salt Kosher Coarse'}
{'Recipe': 'Roasted Broccoli', 'Store': 'Safeway', 'Product': 'Morton Salt Kosher Coarse'}
{'Recipe': 'Roasted Broccoli', 'Store': 'Safeway', 'Product': 'Broccoli'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Safeway', 'Product': 'Romaine Lettuce'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Safeway', 'Product': 'Carrots'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Safeway', 'Product': 'Granulated Sugar'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Safeway', 'Product': 'Cucumber'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Safeway', 'Product': 'Shredded Carrot'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Safeway', 'Product': 'Cilantro'}
{'Recipe': 'Crispy Baked Tofu', 'Store': "Trader Joe's", 'Product': 'Extra Firm Tofu'}
{'Recipe': 'Fresh Spring Rolls', 'Store': "Trader Joe's", 'Product': 'Garlic'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Uwajimaya', 'Product': 'Dry rice noodles'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Uwajimaya', 'Product': 'Rice Wine Vinegar'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Uwajimaya', 'Product': 'Three Crabs Fish Sauce'}
{'Recipe': 'Crispy Baked Tofu', 'Store': 'Whole Foods', 'Product': 'Avocado Oil'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Whole Foods', 'Product': 'Toasted Sesame Oil'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Whole Foods', 'Product': 'Lime juice'}
{'Recipe': 'Fresh Spring Rolls', 'Store': 'Whole Foods', 'Product': 'Frozen Shrimp'}
#+end_example
