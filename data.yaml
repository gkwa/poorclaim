- cypher_query: |
    MATCH (n) RETURN n
  limit: 10
  title: list all nodes and relations
  comment: |
    Not sure what a 'node' means other than that its not a
    'relation'...I think.

    Either way, i have products, stores...things and 'relations
    entities' to connect them.
- cypher_query: |
    MATCH (p:Product)
    RETURN p;
  limit: 5
  title: list all products
- cypher_query: |
    MATCH (product:Product)
    RETURN product;
  limit: 5
  comment: |
    In the realm of cypher, the variable, denoted as 'p' or product,
    is a matter of nomenclature flexibility, allowing for usage in
    both concise or extensive forms, depending on the intricacies of
    the cypher context.

    When engaged in protracted cypher queries, brevity in naming may
    be favored.

    However, when interfacing with the Golang driver and
    conveying results, employing more elucidative names, such as
    'product,' enhances the readability of the Go code.
  title: list all products
- cypher_query: |
    MATCH (p:Product)
    WHERE p.name = 'Ground Cumin'
    RETURN p
  title: find cumin in my list of products
- cypher_query: |
    MATCH (n:Product) RETURN n
  limit: 10
  title: list product entities with properties
- cypher_query: |
    MATCH (p:Product)
    RETURN p.name
    ORDER BY toLower(p.name)
  limit: 5
  title: list all product names sorted
- cypher_query: |
    MATCH (p:Product)
    RETURN p.name AS ProductName, p.urls AS URLs;
  limit: 10
  title: list all product urls
- cypher_query: |
    MATCH (n)
    RETURN DISTINCT labels(n) AS objectType
    ORDER BY objectType
  title: list unique node types
  comment: |
    [[https://www.google.com/search?q=neo4j+cypher+DISTINCT][cypher DISTINCT]]

    [[https://www.google.com/search?q=neo4j+cypher+labels+function][cypher labels()]]
- comment: |
    This reveals that I need to clean up duplicates. Listing two
    instances of the same product name is harmful.
  footer: |
    [[https://www.google.com/search?q=neo4j+cypher+COLLECT+subquery][cypher COLLECT]]
  cypher_query: |
    MATCH (p:Product)
    WITH p.name AS productName, COLLECT(p) AS products
    WHERE SIZE(products) > 1
    RETURN productName, products
  title: list products with identical names
- cypher_query: |
    MATCH (p:Product)
    WITH p.name AS productName, COLLECT(p) AS products
    WHERE SIZE(products) > 1
    RETURN productName, COUNT(products) AS duplicateCount
  title: count duplicates for each product
- comment: |
    In other words how much work do I have to do to cleanup my data?
  cypher_query: |
    MATCH (p:Product)
    WITH p.name AS productName, COUNT(p) AS productCount
    WHERE productCount > 1
    RETURN COUNT(productCount) AS totalDuplicateProducts
  title: count products with the same name
- cypher_query: |
    MATCH (p:Product)
    WITH p.name AS productName, p.urls AS productUrls
    UNWIND productUrls AS url
    RETURN productName, url
  limit: 5
  title: list all products with their urls
  footer: |
    [[https://www.google.com/search?q=neo4j+cypher+UNWIND][cypher UNWIND]]

    [[https://neo4j.com/docs/cypher-manual/current/clauses/unwind/#unwind-unwinding-a-list][cypher UNWINDing a list]]
  comment: |
    Each product can have 0 or more urls.

    #+begin_example
        for each product
           for each url
              ...
    #+end_example
- comment: |
    Ok, so it would be useful too to see what other items have the
    same name. Thats probably an error.
  cypher_query: |
    // fail:
    // MATCH (n)
    // WITH n.name AS name, COUNT(n) AS nCount
    // WHERE nCount > 1
    // RETURN COUNT(nCount) AS totalDuplicateNs, n as N;

    // ok:
    MATCH (item)
    WITH item.name AS itemName, COUNT(item) AS itemCount
    WHERE itemCount > 1
    RETURN COUNT(itemCount) AS totalDuplicateItems, COLLECT(itemName) AS duplicateItemNames
  title: count entities namely Product, Store or Recipe(s) with the same name
- comment: |
    Q: Ok, that works great, but now why are the results grouped?

    A: this why we need unwind...i think.
  cypher_query: |
    MATCH (item)
    WITH item.name AS itemName, COUNT(item) AS itemCount
    WHERE itemCount > 1
    WITH COUNT(itemCount) AS totalDuplicateItems, COLLECT(itemName) AS duplicateItemNames
    UNWIND duplicateItemNames AS duplicateItemName
    RETURN totalDuplicateItems, duplicateItemName
  title: count entities namely Product, Store or Recipe(s) with the same name as separate record
- comment: |
    BAD: list relations, not just CONTAINS and show relation
    properties.

    Gotcha!  This is wrong.  Notice we're missing the is-the-same-as relation.
  cypher_query: |
    MATCH ()-[r]-()
    UNWIND keys(r) AS propertyNames
    RETURN DISTINCT type(r) AS type, propertyNames AS propertyName
    ORDER BY type, propertyName
  title: 'BAD: list relation entities with properties'
- cypher_query: |
    MATCH ()-[r]-()
    RETURN DISTINCT type(r) AS relationType
    ORDER BY relationType
  title: list all relations
- cypher_query: |
    MATCH (r:Recipe {name: 'Vegan Thai Red Curry'})-[:CONTAINS]->(p:Product)
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;
  title: find Vegan Thai Red Curry
- cypher_query: |
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WHERE r.name CONTAINS 'Thai Red Curry'
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;
  title: find Thai Red Curry without specifying exact title
  comment: |
    Substring matching with CONTAINS. We didn't specify Vegan Thai Red
    Curry here.
- cypher_query: |
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WHERE r.name =~ '.*Thai.*Curry.*'
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;
  title: find Thai Curry with regex
- cypher_query: |
    MATCH (r:Recipe)
    WHERE 'Thai' IN [r.name] AND 'Curry' IN [r.name]
    RETURN r.name AS Recipe;
  title: find Thai Curry using cypher IN [] query format
  comment: |
    This returns empty...thats unexpected...
- cypher_query: |
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WHERE 'Thai' IN r.name AND 'Curry' IN r.name
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;
  title: find Thai Curry with multiple substings
  comment: |
    Why does this return no results?
- cypher_query: |
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WHERE r.name =~ '(?i).*thai.*curry.*'
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;
  title: find Thai Curry with regex case insensitively
- cypher_query: |
    MATCH (recipe:Recipe)-[:CONTAINS]->(product:Product)
    WHERE recipe.name =~ '(?i).*thai.*curry.*'
    MATCH (product)-[:PURCHASE_AT]->(store:Store)
    RETURN recipe.name as RecipeName, store.name AS StoreName, COLLECT(DISTINCT product) AS Products;
  title: find Thai Curry with regex case insensitively, output full product details
  comment: |
    We have a map of store to products list. In Go, we can queue the
    product list up for each store, then loop over stores to show
    products we'd need to purchase for each store.
- cypher_query: |
    // ok:
    // MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    // WHERE r.name =~ '(?i).*Thai.*|(?i).*Curry.*'
    // MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;

    // better:
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WHERE r.name =~ '(?i).*(Thai|Curry).*'
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN r.name as Recipe, s.name AS Store, COLLECT(DISTINCT p.name) AS ProductNames;
  title: find recipes with either Thai or Curry
- cypher_query: |
    MATCH (p:Product)-[:PURCHASE_AT]->(s:Store)
    RETURN p.name AS ProductName, s.name AS Store, p.type as Type
    ORDER BY toLower(p.type)
  limit: 10
  title: list products by type
- cypher_query: |
    MATCH (p:Product)
    WHERE p.type IS NULL
    RETURN p.name
  title: list products that I've not yet assiged a type to
- cypher_query: |
    MATCH (r:Recipe)-[c:CONTAINS]->(p:Product)
    WHERE id(p) IS NULL
    RETURN r.name AS Recipe, c.quantity AS Quantity, c.urls AS RecipeUrls
  title: list details about product urls
  comment: |
    What the hell is this one...I've forgotten.
- comment: |
    I can't get this to do what I expect.
  cypher_query: |
    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE p.brand = ''
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // ORDER BY toLower(Brand);

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE p.brand IS NOT NULL AND p.brand <> ''
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // ORDER BY toLower(Brand);

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE exists(p.brand) AND trim(p.brand) <> ''
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // ORDER BY toLower(Brand);

    // Neo.ClientError.Statement.SyntaxError
    // The property existence syntax `... exists(variable.property)` is no longer supported. Please use `variable.property IS NOT NULL` instead. (line 3, column 11 (offset: 77))
    // "    WHERE exists(p.brand) AND trim(p.brand) <> ''"

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE p.brand IS NOT NULL AND trim(p.brand) <> ''
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // ORDER BY toLower(Brand);

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE p.brand IS NOT NULL AND TRIM(p.brand) <> ''
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // ORDER BY toLower(Brand);

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE p.brand IS NOT NULL AND TRIM(p.brand) <> ''
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // ORDER BY toLower(p.brand);
    //
    // In a WITH/RETURN with DISTINCT or an aggregation, it is not possible to access variables declared before the WITH/RETURN: p (line 5, column 22 (offset: 270))
    // "    ORDER BY toLower(p.brand);"

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE p.brand IS NOT NULL AND TRIM(p.brand) <> ''
    // WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
    // ORDER BY toLower(p.brand);

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE COALESCE(p.brand, '') <> ''
    // WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
    // ORDER BY toLower(p.brand);

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE COALESCE(TRIM(p.brand), '') <> ''
    // WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
    // ORDER BY toLower(TRIM(p.brand));

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE COALESCE(p.brand, '') <> '' AND TRIM(p.brand) <> ''
    // WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
    // ORDER BY toLower(TRIM(p.brand));

    // MATCH (p:Product)
    // OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    // WHERE NOT (p.brand IS NULL OR TRIM(p.brand) = '')
    // WITH p, COLLECT(DISTINCT s.name) AS AvailableAtStores
    // RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, AvailableAtStores
    // ORDER BY toLower(TRIM(p.brand));

    // cypher how to filter items whose properties are zero length string

    // MATCH (n:Node)
    // WHERE ALL(prop IN keys(n) WHERE length(n[prop]) = 0)
    // RETURN n;

    // MATCH (n:Product)
    // WHERE ALL(prop IN keys(n) WHERE length(n[prop]) = 0)
    // RETURN n;

    MATCH (p:Product)
    WHERE p.Brand IS NULL OR p.Brand = ""
    RETURN COUNT(p) AS productCount;
  title: 'BAD: tally products with associated brands'
- cypher_query: |
    MATCH (p:Product)
    WITH count(p) AS TotalProducts,
         sum(CASE WHEN p.brand IS NOT NULL AND p.brand <> '' THEN 1 ELSE 0 END) AS ProductsWithBrand,
         sum(CASE WHEN p.brand IS NULL OR p.brand = '' THEN 1 ELSE 0 END) AS ProductsWithoutBrand
    RETURN TotalProducts, ProductsWithBrand, ProductsWithoutBrand
  title: find products without associated brands
- cypher_query: |
    MATCH (p:Product)
    OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN p.name AS ProductName, p.type AS Type, COALESCE(p.brand, '') AS Brand, COLLECT(DISTINCT s.name) AS AvailableAtStores
    ORDER BY toLower(Brand)
  limit: 10
  title: include product brands
- comment: |
    List products whose names contain non-alphanum sorted randomly to
    prevent boredom while cleaning data.
  cypher_query: |
    MATCH (p:Product)
    WHERE p.name =~ ".*[^a-zA-Z0-9 ].*"
    RETURN p.name AS ProductName
    ORDER BY RAND()
  limit: 10
  title: find products with non-alphanumeric names
- comment: |
    This is not possible.

    BAD: fetch all urls for all products, but then don't show urls
    if product doesn't have any.

    Don't try to coerece cypher into formatting output, use
    golang/python/...to pretty-print as you like.
  cypher_query: |
    MATCH (p:Product)
    RETURN p.name AS ProductName, p.urls AS URLs;
  limit: 10
  title: 'BAD: get non-empty product urls'
- cypher_query: |
    MATCH (p:Product)
    WHERE p.urls IS NOT NULL AND SIZE(p.urls) > 0
    RETURN p.name AS ProductName, p.urls AS URLs;
  limit: 10
  title: get products with non-empty url lists
- cypher_query: |
    // ok:
    // MATCH (r:Recipe)-[:CONTAINS]->(p:Product {name: 'Candlenuts'})
    // RETURN r.name AS Recipe, r.urls AS RecipeURLs;

    // better to use case insensitive:
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WHERE p.name =~ '(?i)Candlenuts'
    RETURN r.name AS Recipe, r.urls AS RecipeURLs;
  title: Candlenuts...really?  What recipe calls for that?
- cypher_query: |
    MATCH (p:Product)
    WHERE size(p.urls) > 0
    RETURN p.name AS ProductName, p.urls AS URLs;
  limit: 10
  title: list products with at least one url
- comment: |
    A product may or may not have any one of these properties.
  cypher_query: |
    MATCH (n:Product)
    WITH DISTINCT keys(n) AS propertyNamesList
    UNWIND propertyNamesList AS propertyName
    RETURN DISTINCT propertyName
    ORDER BY toLower(propertyName)
  title: list product properties
- cypher_query: |
    MATCH ()-[r:PURCHASE_AT]->()
    UNWIND keys(r) AS propertyNames
    RETURN DISTINCT propertyNames
  title: list PURCHASE-AT relation properties
  comment: |
    Find all the PURCHASE-AT relations and aggreget the list of
    properties seen.
- cypher_query: |
    MATCH (n)
    UNWIND keys(n) AS propertyName
    RETURN DISTINCT propertyName
    ORDER BY toLower(propertyName)
  title: list case-insensitive properties for all entities
- comment: |
    It's good becaues it lists properties for node entities

    but

    Its bad because it doesn't list properties for relation entities.

    [[GOOD: list properties across all entities]] fixes this problem.
  cypher_query: |
    MATCH (n)
    UNWIND keys(n) AS propertyName
    RETURN DISTINCT propertyName
  title: 'BAD: list properties for all entities'
- comment: |
    Get properties of nodes and then get properties of relation
    entities and then aggregate them into one list.
  cypher_query: |
    MATCH (n)
    UNWIND keys(n) AS propertyName
    RETURN DISTINCT 'Node' AS type, propertyName
    ORDER BY type, propertyName

    UNION

    MATCH ()-[r]-()
    UNWIND keys(r) AS propertyNames
    RETURN DISTINCT type(r) AS type, propertyNames AS propertyName
    ORDER BY type, propertyName
  title: 'GOOD: list properties across all entities'
- cypher_query: |
    MATCH (p:Product)-[:PURCHASE_AT]->(s:Store)
    RETURN p.name AS ProductName, s.name AS Store, p.type as Type
  limit: 10
  title: find products with stores for each
- cypher_query: |
    MATCH (s:Store { name: "dummy place holder" })-[:PURCHASE_AT]->(p:Product)
    RETURN p.name
    ORDER BY toLower(p.name)
  title: list all products you can purchase at dummy store
  comment: |
    These items lack a designated source for purchase.
  footer: |
    Note the arrow direction here. This query fails to give what we
    want see next query.
- cypher_query: |
    MATCH (s:Store { name: "dummy place holder" })-[:PURCHASE_AT]-(p:Product)
    RETURN p.name
    ORDER BY toLower(p.name)
  title: list all products you can purchase at dummy store
  comment: |
    These items lack a designated source for purchase.

    This gives what we expect. Removing the direction allows this to
    work as expected.  Ponder this one.
- comment: |
    Where the hell do I buy this crap? This is list of products that
    I've not yet assiged a store with the PURCHASE-AT relation.
  cypher_query: |
    MATCH (p:Product)
    WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
    RETURN p.name AS ProductName
    ORDER BY toLower(ProductName)
  title: find product purchasing info
- comment: |
    When I check out where to buy stuff, I find lots of things I have
    no clue where to get.

    Count how many of those mystery product locations I need to figure
    out.
  cypher_query: |
    MATCH (p:Product)
    WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
    RETURN COUNT(p) AS ProductCount
  title: dammit this is tedious, how much cleanup remains?
- comment: |
  cypher_query: |
    MATCH (p:Product)
    WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
    WITH p.name AS ProductName, count(p) AS Count
    ORDER BY toLower(ProductName)
    WITH COLLECT({ProductName: ProductName, Count: Count}) AS products
    UNWIND RANGE(0, SIZE(products)-1) AS ItemNumber
    RETURN ItemNumber + 1 AS ItemNumber, products[ItemNumber].ProductName AS ProductName
  title: list count of items not associated with a store
- comment: |
  cypher_query: |
    MATCH (p:Product)
    WHERE NOT (p)-[:PURCHASE_AT]->(:Store)
    WITH p.name AS ProductName, count(p) AS Count
    ORDER BY toLower(ProductName)
    WITH COLLECT({ProductName: ProductName, Count: Count}) AS products
    UNWIND RANGE(0, SIZE(products)-1) AS ItemNumber
    RETURN (ItemNumber + 1) + '. ' + products[ItemNumber].ProductName
  title: 'BAD: items not associated with a store (count)'
- comment: |
    list products that don't have a store associated with them, but
    limit to 10

    Data cleanup is a pain in the ass and I want to take it in bite
    size pieces, so randomize the list to keep me interested and
    return just 10 to keep me from being disheartended.
  cypher_query: |2

    // fail:
    // MATCH (product:Product)
    // WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
    // WITH product
    // ORDER BY RAND()
    // RETURN product.name AS ProductName
    // ORDER BY ProductName
    // LIMIT 10;

    // fail:
    // MATCH (product:Product)
    // WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
    // WITH product
    // ORDER BY RAND()
    // WITH COLLECT(product) AS randomProducts
    // UNWIND randomProducts AS product
    // RETURN product.name AS ProductName
    // ORDER BY ProductName
    // LIMIT 10;

    // fail:
    // MATCH (product:Product)
    // WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
    // WITH product
    // ORDER BY RAND()
    // LIMIT 10
    // RETURN product.name AS ProductName;

    // fail:
    // MATCH (product:Product)
    // WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
    // WITH product
    // ORDER BY RAND()
    // LIMIT 10
    // WITH COLLECT(product) AS randomProducts
    // UNWIND randomProducts AS product
    // ORDER BY product.name
    // RETURN product.name AS ProductName;

    // works:
    MATCH (product:Product)
    WHERE NOT (product)-[:PURCHASE_AT]->(:Store)
    WITH product
    ORDER BY RAND()
    LIMIT 10
    RETURN product.name AS ProductName
    ORDER BY ProductName;
  title: find purchasing info for 10 products
- cypher_query: |
    MATCH (n)
    UNWIND labels(n) AS label
    UNWIND keys(n) AS propertyName
    RETURN label, propertyName
  limit: 10
  title: 'BAD: list the entity type the property is assocted with'
  comment: |
    This is crap.  Results are duplicated.
- cypher_query: |
    MATCH (n)
    UNWIND labels(n) AS label
    UNWIND keys(n) AS propertyName
    RETURN DISTINCT label, propertyName;
  title: 'GOOD: list the entity type the property is assocted with'
  comment: |
    Here's how we can add distinct to eliminates duplicates...makes it
    not crap.
- cypher_query: |
    MATCH (n)
    WITH DISTINCT labels(n) AS distinctLabels, keys(n) AS propertyNames
    UNWIND distinctLabels AS label
    UNWIND propertyNames AS propertyName
    RETURN DISTINCT label, propertyName
  title: list unique entities
- comment: |
    This doesn't help in the least bit...the properties are
    identical...find a better way.
  cypher_query: |
    MATCH ()-[r:CONTAINS]-()
    UNWIND keys(r) AS propertyNames
    RETURN type(r) AS type, propertyNames AS propertyName
    ORDER BY type, propertyName
  limit: 5
  title: list CONTAINS relationships
- cypher_query: |
    MATCH ()-[r:CONTAINS]-()
    UNWIND keys(r) AS propertyNames
    RETURN DISTINCT type(r) AS type, propertyNames AS propertyName
    ORDER BY type, propertyName
  title: list unique CONTAINS relationship properties
- comment: |
    This fails
    #+begin_example
    MATCH (p:Product)
    WHERE EXISTS(p.urls) AND ANY(url IN p.urls WHERE url CONTAINS 'google')
    RETURN p.name AS ProductName, p.urls AS URLs;
    #+end_example

    with error
    #+begin_example
    [mtm@Shane-s-Note:poorclaim(master)]$ cypher-shell -a neo4j://localhost:7687 --file /Users/mtm/pdev/taylormonacelli/anythingflorida/query.cypher
    The property existence syntax `... exists(variable.property)` is no longer supported. Please use `variable.property IS NOT NULL` instead. (line 2, column 7 (offset: 24))
    "WHERE EXISTS(p.urls) AND ANY(url IN p.urls WHERE url CONTAINS 'google')"
         ^
    [mtm@Shane-s-Note:poorclaim(master)]$
    #+end_example
  cypher_query: |
    // this works as expected:

    MATCH (p:Product)
    WHERE p.urls IS NOT NULL AND ANY(url IN p.urls WHERE url CONTAINS 'photos.google.com')
    RETURN p.name AS ProductName, p.urls AS URLs;
  title: list products with Google Drive photo urls
- comment: |
    GOOD: list relations, not just CONTAINS and show relation
    properties

    This fixes the item in section: 'BAD: list relations, not
    just CONTAINS and show relation properties'
  cypher_query: |
    MATCH ()-[r]-()
    RETURN DISTINCT type(r) AS type,
                    CASE WHEN size(keys(r)) > 0 THEN keys(r) ELSE [] END AS propertyNames
    ORDER BY type, propertyNames
  title: 'GOOD: list relation entities and their properties'
- comment: |
    suppose I would like to make a particular recipe, then what stores
    do I need to visit?
  cypher_query: |
    MATCH (r:Recipe)
    WHERE r.name IN ['Vietnamese Spring Rolls (Gỏi Cuốn)']
    WITH r
    MATCH (r)-[:CONTAINS]->(p:Product)
    OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    WITH p, COLLECT(DISTINCT s) AS stores
    RETURN COLLECT(DISTINCT p.name) AS Products,
           [store IN stores | CASE WHEN store IS NOT NULL THEN store.name ELSE 'Unknown' END] AS Stores
    ORDER BY [store IN Stores | toLower(store)]
  title: identify stores for recipe ingredients
- comment: |
    suppose I were to make Chicken Teriyaki, then what stores need I visit
    to get products I'd need for it?
  cypher_query: |
    MATCH (r:Recipe {name: 'Chicken Teriyaki Recipe'})-[:CONTAINS]->(p:Product)
    MATCH (p)-[:PURCHASE_AT]->(s:Store)
    RETURN s.name AS Store, COLLECT(DISTINCT p.name) AS Products
  title: find stores for Chicken Teriyaki ingredients
- comment: |
    suppose I would like to make 2 recipes, then what stores do I need
    to visit?
  cypher_query: |
    MATCH (r:Recipe)
    WHERE r.name IN ['Vietnamese Spring Rolls (Gỏi Cuốn)','Tom Yum Goong']
    WITH r
    MATCH (r)-[:CONTAINS]->(p:Product)
    OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    WITH p, COLLECT(DISTINCT s) AS stores
    RETURN COLLECT(DISTINCT p.name) AS Products,
           [store IN stores | CASE WHEN store IS NOT NULL THEN store.name ELSE 'Unknown' END] AS Stores
    ORDER BY [store IN Stores | toLower(store)]
  title: streamline shopping for recipes
- comment: |
    If I would like to make a particular recipe, then what stores do I
    need to visit and sort products by stores so I don't have to leave
    and return because I didn't realize there were two products from the same store

    Also, make sure that if a recipe has an item that is not assigned
    to a store by the PURCAHSE_AT relation, then the store field
    appears empty as opposed to not seeing the product at all
  cypher_query: |
    MATCH (r:Recipe {name: 'Korean Sesame Noodles'})-[:CONTAINS]->(p:Product)
    OPTIONAL MATCH (p)-[:PURCHASE_AT]->(s:Store)
    WITH p, COLLECT(DISTINCT s) AS stores
    RETURN COLLECT(DISTINCT p.name) AS Products,
           [store IN stores | CASE WHEN store IS NOT NULL THEN store.name ELSE 'Unknown' END] AS Stores
    ORDER BY [store IN Stores | toLower(store)]
  title: minimize travel for recipe ingredients
- comment: |
    BAD: some recipes point to the same product multiple times by
    mistake

    This doesn't do what I expect.  Need to spend more time iterating.
  cypher_query: |
    MATCH (r:Recipe)-[:CONTAINS]->(p:Product)
    WITH r, COLLECT(p) AS products
    WHERE SIZE(products) > 1
    RETURN r, products
  title: 'BAD: remove duplicate ingredients'
- cypher_query: |
    MATCH (p:Product)
    WHERE toLower(p.type) CONTAINS 'vegetable'
    RETURN p.name AS ProductName, p.type AS Type
  title: locate products with vegetable types
- cypher_query: |
    MATCH (p:Product)
    WHERE toLower(p.type) CONTAINS 'peas'
    RETURN p.name AS ProductName, p.type AS Type
  title: locate products with pea-related types
- cypher_query: |
    MATCH (recipe:Recipe)-[:CONTAINS]->(ingredient:Product)
    WHERE
      toLower(ingredient.name) CONTAINS 'chicken stock'
    RETURN recipe, ingredient
    ORDER BY toLower(recipe.name)
  title: what recipes call for chicken stock?
  comment: |
    I made a recipe that calls for chicken stock but I could only buy
    1 qt, but recipe didn't call for 1qt. What other recipe can I make
    with the leftovers?
- cypher_query: |
    MATCH (recipe:Recipe)-[:CONTAINS]->(ingredient:Product)
    WHERE toLower(ingredient.name) CONTAINS 'chicken stock'
    WITH recipe
    MATCH (recipe)-[:CONTAINS]->(allIngredients:Product)
    RETURN recipe.name AS Recipe, recipe.urls AS RecipeURLs, COLLECT(DISTINCT allIngredients.name) AS AllIngredients
    ORDER BY toLower(recipe.name);
  title: recipes that call for chicken stock
  comment: |
    Loop over all recipes that call for chicken stock and show their
    ingredients.
- cypher_query: |
    MATCH (recipe:Recipe)-[:CONTAINS]->(ingredient:Product)
    WHERE
      toLower(ingredient.name) CONTAINS 'carrots' OR
      toLower(ingredient.name) CONTAINS 'beans'
    RETURN recipe, ingredient
    ORDER BY toLower(recipe.name)
  title: find recipes that contain either carrots or beans
- cypher_query: |
    MATCH (recipe)-[:CONTAINS]->(product)
    WHERE product.name IS NULL
    RETURN recipe.name
  title: detecting unknown products in a recipe
  comment: |
    Black Beans has cumin, but we don't have cumin listed in the
    database...for example.
  result_comment: |
    We're hoping for empty result list. If the result set is empty,
    then I've already cleaned up the data.
- cypher_query: |
    MATCH (recipe)-[r:CONTAINS]->(product)
    WHERE product.name IS NULL
    RETURN DISTINCT recipe.name, r.quantity;
  title: recipe with unknown products
  result_comment: |
    We're hoping for empty result list. If the result set is empty,
    then I've already cleaned up the data.
- cypher_query: |
    MATCH (recipe)-[:CONTAINS]->(product)
    WHERE product.name IS NULL
    WITH recipe
    MATCH (recipe)-[:CONTAINS]->(allProducts)
    RETURN recipe.name AS RecipeName, allProducts.name AS ProductName;
  comment: |
    This is data cleanup task.

    Find all recipes that have products whose product names are empty
    or that the product by mistake doesn't yet exist. Its an error in
    the data.

    Once you've found the recipes, then list all the products
    associated with this recipe.  We will need to compare that list.
  title: cleanup data, find recipes with unknown products
  result_comment: |
    We're hoping for empty result list. If the result set is empty,
    then I've already cleaned up the data.
- cypher_query: |
    MATCH (recipe)-[:CONTAINS]->(product)
    WHERE product.name IS NULL AND recipe.name = 'Chicken Thai Red Curry'
    WITH recipe
    MATCH (recipe)-[:CONTAINS]->(allProducts)
    RETURN recipe as RecipeName, allProducts;
  title: fix data for a single recipe
  result_comment: |
    We're hoping for empty result list. If the result set is empty,
    then I've already cleaned up the data.
- cypher_query: |
    MATCH (store:Store)-[:PURCHASE_AT]-(purchasedProduct:Product)-[:CONTAINS]-(recipe:Recipe)
    WHERE recipe.name IN ['Crispy Baked Tofu', 'Roasted Broccoli', 'Fresh Spring Rolls']
    WITH DISTINCT recipe.name AS RecipeName, store.name AS StoreName, purchasedProduct.name AS ProductName
    RETURN RecipeName, StoreName, ProductName
    ORDER BY toLower(StoreName)
  title: find stores for recipe ingredients
  comment: |
    If I were to make Crispy Baked Tofu, Roasted Broccoli and Fresh
    Spring Rolls, then where would I need to go to get the
    ingredients?
